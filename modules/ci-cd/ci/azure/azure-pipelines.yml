# Azure DevOps Pipeline for Baseline Testing
# Enterprise-grade CI/CD with comprehensive testing, caching, and reporting

trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    exclude:
      - docs/*
      - README.md

pr:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - docs/*
      - README.md

schedules:
  - cron: "0 2 * * *"  # Daily at 2 AM
    displayName: Nightly baseline audit
    branches:
      include:
        - main
    always: true

  - cron: "0 6 * * 1"  # Weekly on Monday at 6 AM
    displayName: Weekly comprehensive audit
    branches:
      include:
        - main
    always: true

# Variables
variables:
  - name: nodeVersion
    value: '18.x'
  - name: pythonVersion
    value: '3.11'
  - name: baselineThreshold
    value: 85
  - name: dockerImageName
    value: 'baseline-test'
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: baselineLogLevel
    value: 'INFO'

# Variable groups for sensitive data
  - group: baseline-secrets
  - group: notification-settings

# Stages
stages:
  - stage: Prepare
    displayName: 'Prepare Environment'
    jobs:
      - job: Setup
        displayName: 'Setup Dependencies'
        pool:
          vmImage: $(vmImageName)
        steps:
          - checkout: self
            fetchDepth: 1

          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(nodeVersion)

          - task: UsePythonVersion@0
            displayName: 'Install Python'
            inputs:
              versionSpec: $(pythonVersion)

          - task: Cache@2
            displayName: 'Cache npm dependencies'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: ~/.npm

          - task: Cache@2
            displayName: 'Cache pip dependencies'
            inputs:
              key: 'pip | "$(Agent.OS)" | requirements.txt'
              restoreKeys: |
                pip | "$(Agent.OS)"
              path: ~/.cache/pip

          - script: |
              npm ci --prefer-offline --no-audit
              npm install -g eslint prettier typescript
            displayName: 'Install npm dependencies'

          - script: |
              pip install pytest black flake8 coverage
              if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            displayName: 'Install Python dependencies'

          - script: |
              mkdir -p .baseline-cache/{logs,results,artifacts}
              mkdir -p reports/{junit,coverage,performance,security}
            displayName: 'Create baseline directories'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish setup artifacts'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)'
              artifact: 'source-with-deps'

  - stage: Validate
    displayName: 'Code Validation'
    dependsOn: Prepare
    jobs:
      - job: CodeQuality
        displayName: 'Code Quality Checks'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download source'
            inputs:
              buildType: 'current'
              artifactName: 'source-with-deps'
              targetPath: '$(System.DefaultWorkingDirectory)'

          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)

          - script: |
              echo "Running code quality checks..."
              npm run lint:check || true
              npm run type-check || true
            displayName: 'JavaScript/TypeScript linting'
            continueOnError: true

          - script: |
              echo "Running Python code quality checks..."
              python -m py_compile **/*.py || true
              if command -v flake8 >/dev/null; then flake8 . || true; fi
            displayName: 'Python linting'
            continueOnError: true

      - job: SecurityScan
        displayName: 'Security Scanning'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'source-with-deps'
              targetPath: '$(System.DefaultWorkingDirectory)'

          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)

          - script: |
              echo "Running security audit..."
              npm audit --audit-level=moderate --json > reports/security/npm-audit.json || true
              echo "Security audit completed"
            displayName: 'npm security audit'
            continueOnError: true

          - task: PublishTestResults@2
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/security/*.xml'
              testRunTitle: 'Security Scan Results'

  - stage: TestBaseline
    displayName: 'Baseline Testing'
    dependsOn: Validate
    jobs:
      - job: UnitTests
        displayName: 'Unit Tests'
        pool:
          vmImage: $(vmImageName)
        strategy:
          parallel: 4
        timeoutInMinutes: 30
        steps:
          - template: templates/baseline-test-template.yml
            parameters:
              testType: 'unit'
              timeout: 15
              generateCoverage: true

      - job: IntegrationTests
        displayName: 'Integration Tests'
        pool:
          vmImage: $(vmImageName)
        services:
          redis: redis:7-alpine
          postgres: postgres:13-alpine
        variables:
          POSTGRES_DB: baseline_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          REDIS_URL: redis://localhost:6379
        timeoutInMinutes: 45
        steps:
          - template: templates/baseline-test-template.yml
            parameters:
              testType: 'integration'
              timeout: 30
              services: true

      - job: PerformanceTests
        displayName: 'Performance Tests'
        pool:
          vmImage: $(vmImageName)
        condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'Schedule'))
        timeoutInMinutes: 90
        steps:
          - template: templates/baseline-test-template.yml
            parameters:
              testType: 'performance'
              timeout: 60

      - job: SecurityTests
        displayName: 'Security Tests'
        pool:
          vmImage: $(vmImageName)
        timeoutInMinutes: 30
        steps:
          - template: templates/baseline-test-template.yml
            parameters:
              testType: 'security'
              timeout: 20

  - stage: DockerTesting
    displayName: 'Docker-based Testing'
    dependsOn: Prepare
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    jobs:
      - job: DockerBuild
        displayName: 'Docker Build and Test'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'source-with-deps'
              targetPath: '$(System.DefaultWorkingDirectory)'

          - task: Docker@2
            displayName: 'Build Docker image'
            inputs:
              command: 'build'
              dockerfile: 'docker/Dockerfile.baseline-test'
              buildContext: '.'
              repository: $(dockerImageName)
              tags: |
                $(Build.BuildId)
                latest

          - script: |
              echo "Running tests in Docker container..."
              docker run --rm \
                -v $(pwd):/app \
                -w /app \
                -e BASELINE_ENV=docker \
                -e BASELINE_LOG_LEVEL=$(baselineLogLevel) \
                $(dockerImageName):$(Build.BuildId) \
                npm run test:baseline:all
            displayName: 'Run Docker tests'

          - task: Docker@2
            displayName: 'Push Docker image'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              command: 'push'
              repository: $(dockerImageName)
              tags: |
                $(Build.BuildId)
                latest

  - stage: Analysis
    displayName: 'Results Analysis'
    dependsOn: TestBaseline
    jobs:
      - job: AggregateResults
        displayName: 'Aggregate Test Results'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'source-with-deps'
              targetPath: '$(System.DefaultWorkingDirectory)'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download test artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(pythonVersion)

          - script: |
              echo "Aggregating baseline test results..."
              python scripts/ci/aggregate-results.py \
                --input-dir .baseline-cache/results \
                --output-file reports/analysis/summary.json \
                --threshold $(baselineThreshold)

              echo "Running trend analysis..."
              python scripts/ci/trend-analysis.py \
                --current reports/analysis/summary.json \
                --output reports/analysis/trends.json

              echo "Checking quality gates..."
              python scripts/ci/quality-gates.py \
                --threshold $(baselineThreshold) \
                --input reports/analysis/summary.json
            displayName: 'Analyze results'

          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'reports/junit/*.xml'
              testRunTitle: 'Baseline Test Results'

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish coverage results'
            condition: always()
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'reports/coverage/cobertura.xml'
              reportDirectory: 'reports/coverage/html'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish analysis results'
            condition: always()
            inputs:
              targetPath: 'reports'
              artifact: 'baseline-analysis'

  - stage: Reporting
    displayName: 'Generate Reports'
    dependsOn: Analysis
    jobs:
      - job: GenerateReport
        displayName: 'Generate Comprehensive Report'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'source-with-deps'
              targetPath: '$(System.DefaultWorkingDirectory)'

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'baseline-analysis'
              targetPath: 'reports'

          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(pythonVersion)

          - script: |
              pip install jinja2 matplotlib seaborn pandas
            displayName: 'Install report dependencies'

          - script: |
              echo "Generating comprehensive baseline report..."
              python scripts/ci/generate-report.py \
                --input reports/analysis \
                --output reports/final-report.html \
                --charts reports/charts \
                --pipeline-info "Azure DevOps Build $(Build.BuildNumber)"
            displayName: 'Generate report'

          - task: PublishHtmlReport@1
            displayName: 'Publish HTML report'
            inputs:
              reportDir: 'reports'
              tabName: 'Baseline Report'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish final report'
            inputs:
              targetPath: 'reports/final-report.html'
              artifact: 'baseline-final-report'

  - stage: Deploy
    displayName: 'Deployment'
    dependsOn: Analysis
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: UpdateBaseline
        displayName: 'Update Baseline Files'
        pool:
          vmImage: $(vmImageName)
        environment: 'baseline-production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'baseline-analysis'
                    targetPath: 'reports'

                - script: |
                    if [ -f "reports/analysis/baseline-update-needed.flag" ]; then
                      echo "Baseline update is needed"
                      echo "##vso[task.setvariable variable=updateNeeded]true"
                    else
                      echo "No baseline update needed"
                      echo "##vso[task.setvariable variable=updateNeeded]false"
                    fi
                  displayName: 'Check if update is needed'

                - script: |
                    echo "Updating baseline files..."
                    # Baseline update logic would go here
                    echo "Baseline files would be updated in production"
                  displayName: 'Update baseline files'
                  condition: eq(variables['updateNeeded'], 'true')

  - stage: Notify
    displayName: 'Notifications'
    dependsOn: [Analysis, Reporting]
    condition: always()
    jobs:
      - job: SendNotifications
        displayName: 'Send Notifications'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'baseline-analysis'
              targetPath: 'reports'

          - script: |
              if [ -f "reports/analysis/summary.json" ]; then
                export BASELINE_SCORE=$(jq -r '.overall_score' reports/analysis/summary.json)
                export BASELINE_STATUS=$(jq -r '.status' reports/analysis/summary.json)

                echo "##vso[task.setvariable variable=baselineScore]$BASELINE_SCORE"
                echo "##vso[task.setvariable variable=baselineStatus]$BASELINE_STATUS"
              fi
            displayName: 'Extract notification data'

          - task: PowerShell@2
            displayName: 'Send Slack notification'
            condition: and(always(), ne(variables['slackWebhookUrl'], ''))
            inputs:
              targetType: 'inline'
              script: |
                $status = "$(baselineStatus)"
                $score = "$(baselineScore)"
                $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"

                $emoji = if ($status -eq "PASS") { ":white_check_mark:" } elseif ($status -eq "UNSTABLE") { ":warning:" } else { ":x:" }
                $color = if ($status -eq "PASS") { "good" } elseif ($status -eq "UNSTABLE") { "warning" } else { "danger" }

                $payload = @{
                  text = "$emoji Baseline Tests $status"
                  attachments = @(
                    @{
                      color = $color
                      fields = @(
                        @{
                          title = "Pipeline"
                          value = "$(Build.BuildNumber)"
                          short = $true
                        },
                        @{
                          title = "Branch"
                          value = "$(Build.SourceBranchName)"
                          short = $true
                        },
                        @{
                          title = "Score"
                          value = "${score}%"
                          short = $true
                        },
                        @{
                          title = "Status"
                          value = $status
                          short = $true
                        }
                      )
                      actions = @(
                        @{
                          type = "button"
                          text = "View Pipeline"
                          url = $buildUrl
                        }
                      )
                    }
                  )
                } | ConvertTo-Json -Depth 4

                try {
                  Invoke-RestMethod -Uri "$(slackWebhookUrl)" -Method Post -Body $payload -ContentType 'application/json'
                  Write-Host "Slack notification sent successfully"
                } catch {
                  Write-Warning "Failed to send Slack notification: $_"
                }

          - task: SendEmail@1
            displayName: 'Send email notification'
            condition: and(failed(), ne(variables['emailRecipients'], ''))
            inputs:
              To: '$(emailRecipients)'
              Subject: 'Baseline Tests Failed - Build $(Build.BuildNumber)'
              Body: |
                Baseline tests have failed for build $(Build.BuildNumber).

                Score: $(baselineScore)%
                Status: $(baselineStatus)
                Branch: $(Build.SourceBranchName)

                View the full report: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)

# Template files would be in templates/ directory
# templates/baseline-test-template.yml would contain reusable steps