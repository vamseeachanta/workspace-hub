{
  "metadata": {
    "filename": "technical_specification.pdf",
    "format": "PDF",
    "mime_type": "application/pdf",
    "size_bytes": 1234567,
    "created_at": "2024-10-01T09:00:00",
    "modified_at": "2024-10-05T14:30:00",
    "author": "Engineering Team",
    "title": "API Gateway Technical Specification v3.2",
    "page_count": 28,
    "word_count": 6789,
    "checksum": "a1b2c3d4e5f6789012345678901234567890abcdef",
    "extraction_timestamp": "2025-10-05T14:45:30.123456"
  },
  "text": "# API Gateway Technical Specification v3.2\n\n## Overview\n\nThis document describes the architecture and implementation details for our API Gateway service...\n\n## Architecture\n\nThe API Gateway follows a microservices architecture pattern with the following components:\n\n1. **Load Balancer**: Distributes incoming requests\n2. **Gateway Service**: Core routing and transformation\n3. **Authentication Service**: Token validation and management\n4. **Rate Limiter**: Request throttling and quota management\n5. **Cache Layer**: Response caching for performance\n\n## Authentication Flow\n\n1. Client requests access token from /auth/token\n2. Gateway validates credentials against Auth Service\n3. JWT token generated with 1-hour expiration\n4. Client includes token in Authorization header\n5. Gateway validates token on each request\n\n## Rate Limiting\n\nRate limits are enforced per API key:\n- Free tier: 100 requests/hour\n- Basic tier: 1,000 requests/hour\n- Professional tier: 10,000 requests/hour\n- Enterprise tier: Custom limits\n\n## API Endpoints\n\n### Authentication\n\n**POST /auth/token**\nRequest access token with credentials.\n\nRequest:\n```json\n{\n  \"client_id\": \"string\",\n  \"client_secret\": \"string\",\n  \"grant_type\": \"client_credentials\"\n}\n```\n\nResponse:\n```json\n{\n  \"access_token\": \"eyJhbGc...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\n```\n\n### Data API\n\n**GET /api/v1/users**\nRetrieve user list with pagination.\n\nQuery Parameters:\n- page (integer): Page number (default: 1)\n- limit (integer): Items per page (default: 20, max: 100)\n- sort (string): Sort field and direction (e.g., \"created_at:desc\")\n\n**GET /api/v1/users/{id}**\nRetrieve specific user by ID.\n\n**POST /api/v1/users**\nCreate new user.\n\n**PUT /api/v1/users/{id}**\nUpdate existing user.\n\n**DELETE /api/v1/users/{id}**\nDelete user.\n\n## Error Handling\n\nAll errors follow RFC 7807 Problem Details format:\n\n```json\n{\n  \"type\": \"https://api.example.com/errors/rate-limit-exceeded\",\n  \"title\": \"Rate Limit Exceeded\",\n  \"status\": 429,\n  \"detail\": \"You have exceeded your hourly request quota\",\n  \"instance\": \"/api/v1/users?page=5\"\n}\n```\n\n## Performance Requirements\n\n- P95 latency: < 100ms\n- P99 latency: < 250ms\n- Availability: 99.95%\n- Throughput: 10,000 requests/second\n\n## Security\n\n1. **TLS 1.3**: All connections encrypted\n2. **JWT Tokens**: RS256 algorithm, 1-hour expiration\n3. **API Keys**: SHA-256 hashed storage\n4. **Input Validation**: Schema validation on all inputs\n5. **CORS**: Configurable allowed origins\n6. **Content Security Policy**: Strict CSP headers\n\n## Monitoring\n\nKey metrics tracked:\n- Request rate (requests/second)\n- Error rate (percentage)\n- Latency (p50, p95, p99)\n- Authentication success/failure rate\n- Cache hit/miss ratio\n- Upstream service health\n\n## Deployment\n\nThe gateway is deployed using Kubernetes with:\n- 3 availability zones\n- 6 replicas (2 per zone)\n- Horizontal Pod Autoscaling (2-20 pods)\n- Rolling updates with 25% max surge\n- Health checks every 10 seconds\n\n## Dependencies\n\n- Redis 7.x (cache and rate limiting)\n- PostgreSQL 15.x (configuration storage)\n- Kafka 3.x (event streaming)\n- Prometheus (metrics)\n- Grafana (dashboards)\n\n## Appendix A: Response Codes\n\n[See table in tables section]\n\n## Appendix B: Configuration\n\n[See table in tables section]",
  "structure": {
    "pages": 28
  },
  "tables": [
    {
      "page": 15,
      "table_number": 1,
      "data": [
        ["Status Code", "Description", "Retry?"],
        ["200", "Success", "N/A"],
        ["201", "Created", "N/A"],
        ["400", "Bad Request", "No"],
        ["401", "Unauthorized", "Yes (with new token)"],
        ["403", "Forbidden", "No"],
        ["404", "Not Found", "No"],
        ["429", "Rate Limited", "Yes (after backoff)"],
        ["500", "Internal Error", "Yes (with exponential backoff)"],
        ["502", "Bad Gateway", "Yes"],
        ["503", "Service Unavailable", "Yes"]
      ],
      "markdown": "| Status Code | Description | Retry? |\n| --- | --- | --- |\n| 200 | Success | N/A |\n| 201 | Created | N/A |\n| 400 | Bad Request | No |\n| 401 | Unauthorized | Yes (with new token) |\n| 403 | Forbidden | No |\n| 404 | Not Found | No |\n| 429 | Rate Limited | Yes (after backoff) |\n| 500 | Internal Error | Yes (with exponential backoff) |\n| 502 | Bad Gateway | Yes |\n| 503 | Service Unavailable | Yes |"
    },
    {
      "page": 22,
      "table_number": 2,
      "data": [
        ["Configuration", "Environment Variable", "Default", "Required"],
        ["Server Port", "PORT", "8080", "No"],
        ["Redis URL", "REDIS_URL", "redis://localhost:6379", "Yes"],
        ["Database URL", "DATABASE_URL", "", "Yes"],
        ["JWT Secret", "JWT_SECRET", "", "Yes"],
        ["Log Level", "LOG_LEVEL", "info", "No"],
        ["CORS Origins", "CORS_ORIGINS", "*", "No"],
        ["Rate Limit", "RATE_LIMIT_PER_HOUR", "1000", "No"]
      ],
      "markdown": "| Configuration | Environment Variable | Default | Required |\n| --- | --- | --- | --- |\n| Server Port | PORT | 8080 | No |\n| Redis URL | REDIS_URL | redis://localhost:6379 | Yes |\n| Database URL | DATABASE_URL | | Yes |\n| JWT Secret | JWT_SECRET | | Yes |\n| Log Level | LOG_LEVEL | info | No |\n| CORS Origins | CORS_ORIGINS | * | No |\n| Rate Limit | RATE_LIMIT_PER_HOUR | 1000 | No |"
    }
  ],
  "formulas": [],
  "images": [],
  "links": [
    {
      "text": "RFC 7807",
      "url": "https://tools.ietf.org/html/rfc7807"
    },
    {
      "text": "JWT.io",
      "url": "https://jwt.io"
    },
    {
      "text": "OpenAPI Specification",
      "url": "https://swagger.io/specification/"
    }
  ]
}
