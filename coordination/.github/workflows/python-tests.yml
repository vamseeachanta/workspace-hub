name: Python Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    # Run tests every Sunday at 4 AM UTC
    - cron: '0 4 * * 0'

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 3
  CI: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install UV package manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[test,dev]"

    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true

    - name: Type checking with mypy
      run: |
        mypy src
      continue-on-error: true

    - name: Format check with black
      run: |
        black --check --diff src tests
      continue-on-error: true

    - name: Import sort check with isort
      run: |
        isort --check-only --diff src tests
      continue-on-error: true

    - name: Run tests with pytest
      run: |
        pytest \
          --cov=src \
          --cov-report=xml:coverage-${{ matrix.python-version }}.xml \
          --cov-report=html:htmlcov-${{ matrix.python-version }} \
          --cov-report=term-missing \
          --cov-fail-under=0 \
          --junitxml=pytest-${{ matrix.python-version }}.xml \
          --verbose \
          tests/
      env:
        TESTING: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: coverage-${{ matrix.python-version }}.xml
        flags: python-${{ matrix.python-version }}
        name: codecov-python-${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-${{ matrix.python-version }}.xml
          coverage-${{ matrix.python-version }}.xml
          htmlcov-${{ matrix.python-version }}/

    - name: Create test summary
      if: always()
      run: |
        echo "## Test Results for Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        python -m coverage report >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        cache: 'pip'

    - name: Install UV package manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"

    - name: Comprehensive linting with flake8
      run: |
        echo "## Flake8 Linting Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        flake8 src tests --statistics >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Type checking with mypy
      run: |
        echo "## MyPy Type Checking Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        mypy src >> $GITHUB_STEP_SUMMARY || true
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Check formatting with black
      run: |
        black --check --diff src tests

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src tests

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        safety check --json || true

    - name: Run bandit security linter
      run: |
        bandit -r src -f json || true

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, lint-and-format, security]
    if: always()

    steps:
    - name: Evaluate results
      run: |
        echo "üîç Evaluating test results..."

        # Check main tests
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "‚úÖ Tests: PASSED"
        else
          echo "‚ùå Tests: FAILED"
          exit 1
        fi

        # Check code quality
        if [[ "${{ needs.lint-and-format.result }}" == "success" ]]; then
          echo "‚úÖ Code Quality: PASSED"
        else
          echo "‚ö†Ô∏è Code Quality: ISSUES FOUND (non-blocking)"
        fi

        # Check security
        if [[ "${{ needs.security.result }}" == "success" ]]; then
          echo "‚úÖ Security: PASSED"
        else
          echo "‚ö†Ô∏è Security: ISSUES FOUND (non-blocking)"
        fi

        echo "üéâ Quality gate passed!"

    - name: Post success comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && success()
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üéâ All tests passed! Quality gate approved for merge.'
          })