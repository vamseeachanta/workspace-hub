# docker-compose.test.yml Template
#
# Docker Compose configuration for test services
# Copy this file to your project root as 'docker-compose.test.yml'
#
# Usage:
#   docker-compose -f docker-compose.test.yml up -d
#   # Run your tests
#   docker-compose -f docker-compose.test.yml down

version: '3.8'

services:
  # PostgreSQL for testing
  test-postgres:
    image: postgres:15-alpine
    container_name: test-postgres
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      # Mount init scripts
      - ./tests/db/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./tests/db/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
      # Mount test data
      - test_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Redis for caching/sessions testing
  test-redis:
    image: redis:7-alpine
    container_name: test-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --requirepass test_pass
    volumes:
      - test_redis_data:/data
      - ./tests/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  # MongoDB for document testing
  test-mongodb:
    image: mongo:6
    container_name: test-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: test_user
      MONGO_INITDB_ROOT_PASSWORD: test_pass
      MONGO_INITDB_DATABASE: test_db
    ports:
      - "27018:27017"
    volumes:
      - test_mongodb_data:/data/db
      - ./tests/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - test-network

  # Elasticsearch for search testing (optional)
  test-elasticsearch:
    image: elasticsearch:8.11.0
    container_name: test-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9201:9200"
    volumes:
      - test_elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - test-network
    profiles:
      - search  # Only start with --profile search

  # MinIO for S3-compatible storage testing (optional)
  test-minio:
    image: minio/minio:latest
    container_name: test-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: test_access_key
      MINIO_ROOT_PASSWORD: test_secret_key
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    volumes:
      - test_minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network
    profiles:
      - storage  # Only start with --profile storage

  # RabbitMQ for message queue testing (optional)
  test-rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: test-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: test_user
      RABBITMQ_DEFAULT_PASS: test_pass
    ports:
      - "5673:5672"   # AMQP
      - "15673:15672" # Management UI
    volumes:
      - test_rabbitmq_data:/var/lib/rabbitmq
      - ./tests/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      - ./tests/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network
    profiles:
      - messaging  # Only start with --profile messaging

  # Test database migration service
  test-migrator:
    build:
      context: .
      dockerfile: tests/Dockerfile.migrator
    container_name: test-migrator
    depends_on:
      test-postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://test_user:test_pass@test-postgres:5432/test_db
    volumes:
      - ./migrations:/app/migrations:ro
    networks:
      - test-network
    profiles:
      - migration

  # Test application instance (backend)
  test-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    container_name: test-backend
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://test_user:test_pass@test-postgres:5432/test_db
      REDIS_URL: redis://:test_pass@test-redis:6379/0
      TESTING: "true"
      LOG_LEVEL: DEBUG
    ports:
      - "8001:8000"
    volumes:
      - ./backend:/app:ro
      - test_backend_logs:/app/logs
    networks:
      - test-network
    profiles:
      - integration

  # Test application instance (frontend)
  test-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    container_name: test-frontend
    depends_on:
      - test-backend
    environment:
      REACT_APP_API_URL: http://test-backend:8000
      NODE_ENV: test
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app:ro
    networks:
      - test-network
    profiles:
      - integration

  # Test runner service
  test-runner:
    build:
      context: .
      dockerfile: tests/Dockerfile.runner
    container_name: test-runner
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://test_user:test_pass@test-postgres:5432/test_db
      REDIS_URL: redis://:test_pass@test-redis:6379/0
      BACKEND_URL: http://test-backend:8000
      FRONTEND_URL: http://test-frontend:3000
    volumes:
      - ./tests:/app/tests:ro
      - ./shared:/app/shared:ro
      - test_results:/app/results
    networks:
      - test-network
    profiles:
      - runner

volumes:
  test_postgres_data:
    driver: local
  test_redis_data:
    driver: local
  test_mongodb_data:
    driver: local
  test_elasticsearch_data:
    driver: local
  test_minio_data:
    driver: local
  test_rabbitmq_data:
    driver: local
  test_backend_logs:
    driver: local
  test_results:
    driver: local

networks:
  test-network:
    driver: bridge
    name: test-network

# Usage examples:
#
# Start basic services (postgres, redis):
# docker-compose -f docker-compose.test.yml up -d
#
# Start with search capabilities:
# docker-compose -f docker-compose.test.yml --profile search up -d
#
# Start with storage capabilities:
# docker-compose -f docker-compose.test.yml --profile storage up -d
#
# Start with messaging capabilities:
# docker-compose -f docker-compose.test.yml --profile messaging up -d
#
# Run migrations:
# docker-compose -f docker-compose.test.yml --profile migration up test-migrator
#
# Full integration testing setup:
# docker-compose -f docker-compose.test.yml --profile integration up -d
#
# Run test suite:
# docker-compose -f docker-compose.test.yml --profile runner up test-runner
#
# Stop all services:
# docker-compose -f docker-compose.test.yml down
#
# Stop and remove volumes:
# docker-compose -f docker-compose.test.yml down -v