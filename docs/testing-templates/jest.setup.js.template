// jest.setup.js Template
//
// Jest setup file for global test configuration
// Copy this file to your tests/ directory as 'setup.js'
// Reference it in your jest.config.js: setupFilesAfterEnv: ['<rootDir>/tests/setup.js']

// Global test environment setup

// Extend Jest matchers (uncomment if using @testing-library/jest-dom)
// import '@testing-library/jest-dom';

// Set test timeout globally (can be overridden per test)
jest.setTimeout(10000); // 10 seconds

// Mock console methods to avoid noise in test output
global.console = {
  ...console,
  // Uncomment to suppress specific console methods during tests
  // log: jest.fn(),
  // warn: jest.fn(),
  // error: jest.fn(),
  // info: jest.fn(),
  // debug: jest.fn(),
};

// Global test utilities
global.testUtils = {
  // Helper function to wait for async operations
  waitFor: (ms) => new Promise(resolve => setTimeout(resolve, ms)),

  // Helper to create mock functions with common patterns
  createMockFunction: (returnValue) => jest.fn(() => returnValue),

  // Helper to create mock promise
  createMockPromise: (resolveValue, shouldReject = false) => {
    return shouldReject
      ? Promise.reject(resolveValue)
      : Promise.resolve(resolveValue);
  },

  // Helper to create test data
  createTestUser: (overrides = {}) => ({
    id: 1,
    name: 'Test User',
    email: 'test@example.com',
    active: true,
    ...overrides
  }),

  // Helper to create mock API response
  createMockApiResponse: (data, status = 200) => ({
    data,
    status,
    ok: status >= 200 && status < 300,
    headers: new Headers(),
    json: () => Promise.resolve(data)
  })
};

// Mock global objects commonly needed in tests
global.fetch = jest.fn();

// Mock window object for browser environment simulation
Object.defineProperty(window, 'location', {
  value: {
    href: 'http://localhost:3000',
    origin: 'http://localhost:3000',
    pathname: '/',
    search: '',
    hash: ''
  },
  writable: true
});

// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
};
global.localStorage = localStorageMock;

// Mock sessionStorage
const sessionStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
};
global.sessionStorage = sessionStorageMock;

// Environment variables for testing
process.env.NODE_ENV = 'test';
process.env.TESTING = 'true';

// Global test hooks
beforeEach(() => {
  // Reset all mocks before each test
  jest.clearAllMocks();

  // Reset localStorage and sessionStorage
  localStorage.clear();
  sessionStorage.clear();

  // Reset fetch mock
  global.fetch.mockClear();
});

afterEach(() => {
  // Cleanup after each test
  jest.restoreAllMocks();
});

beforeAll(() => {
  // Setup before all tests
  console.log('ðŸ§ª Starting test suite...');
});

afterAll(() => {
  // Cleanup after all tests
  console.log('âœ… Test suite completed');
});

// Error handling for unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // Fail the test if there's an unhandled rejection
  throw reason;
});

// Custom Jest matchers (uncomment if needed)
// expect.extend({
//   toBeWithinRange(received, floor, ceiling) {
//     const pass = received >= floor && received <= ceiling;
//     if (pass) {
//       return {
//         message: () =>
//           `expected ${received} not to be within range ${floor} - ${ceiling}`,
//         pass: true,
//       };
//     } else {
//       return {
//         message: () =>
//           `expected ${received} to be within range ${floor} - ${ceiling}`,
//         pass: false,
//       };
//     }
//   },
// });

// Mock external dependencies commonly used across tests
jest.mock('axios', () => ({
  get: jest.fn(() => Promise.resolve({ data: {} })),
  post: jest.fn(() => Promise.resolve({ data: {} })),
  put: jest.fn(() => Promise.resolve({ data: {} })),
  delete: jest.fn(() => Promise.resolve({ data: {} })),
  create: jest.fn(() => ({
    get: jest.fn(() => Promise.resolve({ data: {} })),
    post: jest.fn(() => Promise.resolve({ data: {} })),
    put: jest.fn(() => Promise.resolve({ data: {} })),
    delete: jest.fn(() => Promise.resolve({ data: {} })),
  })),
}));

// React-specific setup (uncomment if using React)
// import { configure } from '@testing-library/react';
//
// configure({
//   testIdAttribute: 'data-testid',
// });

// Next.js specific setup (uncomment if using Next.js)
// jest.mock('next/router', () => ({
//   useRouter() {
//     return {
//       route: '/',
//       pathname: '/',
//       query: {},
//       asPath: '/',
//       push: jest.fn(),
//       pop: jest.fn(),
//       reload: jest.fn(),
//       back: jest.fn(),
//       prefetch: jest.fn().mockResolvedValue(undefined),
//       beforePopState: jest.fn(),
//       events: {
//         on: jest.fn(),
//         off: jest.fn(),
//         emit: jest.fn(),
//       },
//     };
//   },
// }));

// Database setup (uncomment if using database)
// import { setupTestDb, teardownTestDb } from './helpers/database';
//
// beforeAll(async () => {
//   await setupTestDb();
// });
//
// afterAll(async () => {
//   await teardownTestDb();
// });

// WebSocket mock (uncomment if using WebSockets)
// global.WebSocket = jest.fn(() => ({
//   send: jest.fn(),
//   close: jest.fn(),
//   addEventListener: jest.fn(),
//   removeEventListener: jest.fn(),
// }));