# Modern UV Configuration Template
# UV Version: 0.4.0+
# Python: 3.9+
# Last Updated: 2025-09-28

# Core project configuration
[project]
name = "project-name"
version = "0.1.0"
description = "Project description"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

# Core dependencies
dependencies = [
    # Add your project dependencies here
]

# Optional dependency groups
[project.optional-dependencies]
dev = [
    "pytest>=8.0",
    "pytest-cov>=5.0",
    "pytest-xdist>=3.5",
    "black>=24.0",
    "ruff>=0.5",
    "mypy>=1.10",
    "pre-commit>=3.5",
]
test = [
    "pytest>=8.0",
    "pytest-cov>=5.0",
    "pytest-xdist>=3.5",
    "pytest-mock>=3.12",
    "pytest-asyncio>=0.23",
    "hypothesis>=6.100",
]
docs = [
    "sphinx>=7.0",
    "sphinx-rtd-theme>=2.0",
    "sphinx-autodoc-typehints>=2.0",
    "myst-parser>=2.0",
]
viz = [
    "matplotlib>=3.7",
    "plotly>=5.18",
    "seaborn>=0.13",
]

# UV-specific configuration
[tool.uv]
# Development dependencies (installed by default with uv sync)
dev-dependencies = [
    "ipython>=8.0",
    "jupyter>=1.0",
    "notebook>=7.0",
]

# Package indexes (if using private registries)
index-url = "https://pypi.org/simple"
# extra-index-url = ["https://private.pypi.org/simple"]

# Compile options
compile-bytecode = true
# reinstall = false
# no-cache = false

# Resolution strategy
# strategy = "highest"  # or "lowest" for conservative updates

# UV Sources - for local/git dependencies
[tool.uv.sources]
# local-package = { path = "../local-package" }
# git-package = { git = "https://github.com/org/repo.git", branch = "main" }
# private-package = { url = "https://private.pypi.org/package.whl" }

# UV Scripts - custom commands
[tool.uv.scripts]
# Basic commands
test = "pytest tests/ -v --cov=src --cov-report=term-missing"
test-fast = "pytest tests/ -v --tb=short -m 'not slow'"
test-all = "pytest tests/ -v --cov=src --cov-report=html --cov-report=xml"

# Code quality
lint = "ruff check . && black --check . && mypy src/"
format = "ruff check . --fix && black ."
typecheck = "mypy src/ --strict"

# Documentation
docs = "sphinx-build -W -b html docs docs/_build"
docs-live = "sphinx-autobuild docs docs/_build --host 0.0.0.0"

# Development
dev = "python -m IPython"
notebook = "jupyter notebook"
clean = """
    rm -rf build dist *.egg-info .coverage htmlcov .pytest_cache .mypy_cache .ruff_cache
    find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
    find . -type f -name '*.pyc' -delete
"""

# Build & Release
build = "python -m build"
release = "python -m twine upload dist/*"
version = "python -c 'from src.package import __version__; print(__version__)'"

# UV Workspace configuration (for monorepos)
# [workspace]
# members = [
#     "packages/*",
#     "apps/*",
# ]
#
# [workspace.package]
# requires-python = ">=3.9"
#
# [workspace.dependencies]
# shared-dep = ">=1.0"

# Build system
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Hatchling configuration
[tool.hatch.build.targets.wheel]
packages = ["src/package"]

# Black formatter configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# Ruff linter configuration
[tool.ruff]
target-version = "py39"
line-length = 88
fix = true
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__ files
"tests/**/*" = ["ARG", "S101"]  # allow assertions and unused arguments in tests

# MyPy type checking configuration
[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-config",
    "--strict-markers",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests",
    "regression: marks tests checking for regressions",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"
title = "Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# IPython configuration
[tool.ipython]
colors = "linux"
autoindent = true
automagic = true