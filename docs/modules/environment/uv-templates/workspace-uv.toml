# UV Workspace Configuration Template
# Version: 1.0.0
# For mono-repositories with multiple Python packages

[workspace]
# Define workspace members (packages that are part of this workspace)
members = [
    # Core packages
    "packages/core",
    "packages/api",
    "packages/web",
    "packages/cli",

    # Services
    "services/auth",
    "services/notification",
    "services/analytics",

    # Tools and utilities
    "tools/scripts",
    "tools/deployment",
    "tools/monitoring",

    # Documentation
    "docs",

    # Use glob patterns for flexibility
    "microservices/*",
    "libs/*",
]

# Exclude certain directories from workspace
exclude = [
    "legacy/*",
    "archive/*",
    "tmp/*",
    "build/*",
    "dist/*",
    ".venv",
    "venv",
    "node_modules",
]

# Workspace-wide dependency management
[workspace.dependencies]
# Shared dependencies across all workspace members
# These can be referenced by workspace members as { workspace = true }

# Core utilities
pydantic = ">=2.4.0"
click = ">=8.1.0"
rich = ">=13.0.0"

# HTTP and web
httpx = ">=0.25.0"
fastapi = ">=0.104.0"
uvicorn = ">=0.24.0"

# Database
sqlalchemy = ">=2.0.0"
alembic = ">=1.12.0"

# Testing framework
pytest = ">=7.4.0"
pytest-cov = ">=4.1.0"
pytest-asyncio = ">=0.21.0"

# Code quality tools
ruff = ">=0.1.0"
black = ">=23.9.0"
mypy = ">=1.6.0"

# Development tools
pre-commit = ">=3.5.0"

[workspace.tool.uv]
# Workspace-wide UV configuration

# Development dependencies for the entire workspace
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",     # Parallel test execution
    "ruff>=0.1.0",              # Linting and formatting
    "mypy>=1.6.0",              # Type checking
    "pre-commit>=3.5.0",        # Git hooks
    "tox>=4.11.0",              # Multi-environment testing
]

# Shared package index configuration
index-url = "https://pypi.org/simple"
extra-index-url = [
    # Add any private or specialized package indexes
    # "https://private-pypi.company.com/simple",
]

# Resolution strategy for the entire workspace
resolution = "highest"

# Prerelease handling
prerelease = "disallow"

# Workspace-wide cache configuration
cache-dir = ".uv-cache"

# Virtual environment location (relative to workspace root)
virtual-env = ".venv"

# Workspace sync options
sync-members = true              # Sync all workspace members by default

# ===== WORKSPACE MEMBER EXAMPLE CONFIGURATIONS =====

# Example core package configuration
# packages/core/pyproject.toml would contain:
# [project]
# name = "myproject-core"
# dependencies = [
#     "pydantic",  # Uses workspace.dependencies.pydantic
#     "rich",      # Uses workspace.dependencies.rich
# ]

# Example API service configuration
# services/api/pyproject.toml would contain:
# [project]
# name = "myproject-api"
# dependencies = [
#     "fastapi",          # Uses workspace.dependencies.fastapi
#     "uvicorn",          # Uses workspace.dependencies.uvicorn
#     "myproject-core",   # Local workspace dependency
# ]

# ===== TOOL CONFIGURATIONS (WORKSPACE-WIDE) =====

[tool.ruff]
# Workspace-wide ruff configuration
target-version = "py39"
line-length = 88
select = [
    "E", "W",  # pycodestyle
    "F",       # pyflakes
    "I",       # isort
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "UP",      # pyupgrade
]
ignore = [
    "E501",    # line too long, handled by formatter
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.black]
# Workspace-wide black configuration
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]

[tool.mypy]
# Workspace-wide mypy configuration
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.pytest.ini_options]
# Workspace-wide pytest configuration
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--cov=packages",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = [
    "packages/*/tests",
    "services/*/tests",
    "tools/*/tests",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
# Coverage configuration for workspace
source = [
    "packages",
    "services",
    "tools",
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__init__.py",
]

# ===== WORKSPACE SCRIPTS AND COMMANDS =====

[project.scripts]
# Workspace-wide CLI commands
workspace-test = "scripts.test:run_all_tests"
workspace-lint = "scripts.lint:run_all_linting"
workspace-format = "scripts.format:format_all_code"
workspace-build = "scripts.build:build_all_packages"
workspace-deploy = "scripts.deploy:deploy_all_services"

# ===== COMMON WORKSPACE PATTERNS =====

# Pattern 1: Shared library approach
# - Core packages provide shared functionality
# - Services depend on core packages
# - Tools use both core and services

# Pattern 2: Microservices approach
# - Each service is independent
# - Shared dependencies via workspace.dependencies
# - Common tooling and testing

# Pattern 3: Monolithic with modules
# - Single main package with sub-modules
# - Shared configuration and dependencies
# - Unified build and deployment

# ===== WORKSPACE MANAGEMENT COMMANDS =====

# Common UV workspace commands:
# uv sync                          # Sync all workspace members
# uv sync --package core           # Sync specific package only
# uv add --workspace requests      # Add dependency to workspace
# uv add --package api fastapi     # Add dependency to specific package
# uv run --package api python -m api.main  # Run command in specific package
# uv build --package core         # Build specific package
# uv test packages/core           # Test specific package

# ===== WORKSPACE MIGRATION NOTES =====

# When converting to UV workspace:
# 1. Move shared dependencies to workspace.dependencies
# 2. Update individual pyproject.toml files to reference workspace deps
# 3. Consolidate tool configurations at workspace level
# 4. Update CI/CD to use workspace commands
# 5. Test that all packages resolve correctly