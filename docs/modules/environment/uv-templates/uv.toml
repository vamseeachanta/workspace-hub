# UV Configuration Template
# Version: 1.0.0
# This file configures UV package manager behavior for the project

[project]
# Basic project metadata (required)
name = "your-project-name"
version = "0.1.0"
description = "A brief description of your project"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]

# Python version requirements
requires-python = ">=3.9"

# Runtime dependencies (production)
dependencies = [
    # Web frameworks
    # "fastapi>=0.104.0",
    # "flask>=3.0.0",
    # "django>=4.2.0",

    # Data processing
    # "pandas>=2.1.0",
    # "numpy>=1.24.0",

    # HTTP clients
    # "httpx>=0.25.0",
    # "requests>=2.31.0",

    # Database
    # "sqlalchemy>=2.0.0",
    # "asyncpg>=0.29.0",

    # Utilities
    # "pydantic>=2.4.0",
    # "python-dotenv>=1.0.0",
]

# Optional dependency groups
[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]

# Testing dependencies (subset of dev for CI)
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.25.0",  # For testing HTTP APIs
    "faker>=19.0.0",  # For generating test data
]

# Documentation dependencies
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

# Linting and formatting (alternative to dev)
lint = [
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]

# Build and packaging
build = [
    "build>=1.0.0",
    "twine>=4.0.0",
    "wheel>=0.41.0",
]

# Performance and profiling
perf = [
    "py-spy>=0.3.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]

# Project URLs for PyPI
[project.urls]
Homepage = "https://github.com/yourusername/your-project"
Repository = "https://github.com/yourusername/your-project.git"
Documentation = "https://your-project.readthedocs.io/"
Changelog = "https://github.com/yourusername/your-project/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/yourusername/your-project/issues"

# Entry points (CLI commands)
[project.scripts]
# your-cli = "your_package.cli:main"

# GUI entry points
[project.gui-scripts]
# your-gui = "your_package.gui:main"

# Plugin entry points
[project.entry-points."your.plugin.group"]
# plugin-name = "your_package.plugins:plugin_function"

# Build system configuration
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# UV-specific configuration
[tool.uv]
# Development dependencies (included with `uv sync --dev`)
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
]

# Package index configuration
index-url = "https://pypi.org/simple"
extra-index-url = [
    # "https://private-pypi.company.com/simple",
]

# Resolution strategy
resolution = "highest"  # Options: "highest", "lowest-direct"

# Prerelease handling
prerelease = "disallow"  # Options: "allow", "explicit", "disallow"

# Cache configuration
cache-dir = ".uv-cache"
no-cache = false

# Installation preferences
compile-bytecode = true
no-build-isolation = false

# Virtual environment configuration
virtual-env = ".venv"

# Workspace configuration (for mono-repos)
# [tool.uv.workspace]
# members = [
#     "packages/*",
#     "services/*",
# ]

# Package-specific configuration
# [tool.uv.packages.some-package]
# version = "==1.2.3"
# index = "https://custom-index.com/simple"

# Tool configurations

# Black formatter
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff linter and formatter
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# MyPy type checker
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "some_untyped_package.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linter
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

# isort (if not using ruff for import sorting)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["your_package"]

# Hatch build configuration
[tool.hatch.version]
path = "src/your_package/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/your_package"]