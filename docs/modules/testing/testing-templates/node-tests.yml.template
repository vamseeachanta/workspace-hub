# Node.js Tests GitHub Actions Workflow Template
#
# Copy this file to .github/workflows/node-tests.yml
# Customize the Node.js versions, OS, and package manager as needed

name: Node.js Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.js'
      - '**/*.jsx'
      - '**/*.ts'
      - '**/*.tsx'
      - 'package*.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - 'jest.config.*'
      - '.github/workflows/node-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.js'
      - '**/*.jsx'
      - '**/*.ts'
      - '**/*.tsx'
      - 'package*.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - 'jest.config.*'
  workflow_dispatch:
  schedule:
    # Run tests every Sunday at 3 AM UTC
    - cron: '0 3 * * 0'

env:
  # Global environment variables
  NODE_ENV: test
  FORCE_COLOR: 3
  CI: true

jobs:
  test:
    name: Test on Node.js ${{ matrix.node-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        node-version: ['18.x', '20.x', '21.x']
        os: [ubuntu-latest, windows-latest, macos-latest]
        # Exclude combinations if needed
        exclude:
          - os: windows-latest
            node-version: '18.x'
          - os: macos-latest
            node-version: '18.x'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        # Alternative cache options:
        # cache: 'yarn'
        # cache: 'pnpm'

    # Alternative: Use pnpm
    # - name: Setup pnpm
    #   uses: pnpm/action-setup@v2
    #   with:
    #     version: 8

    - name: Install dependencies
      run: npm ci
      # Alternative for yarn:
      # run: yarn install --frozen-lockfile
      # Alternative for pnpm:
      # run: pnpm install --frozen-lockfile

    - name: Lint code
      run: npm run lint
      continue-on-error: true

    - name: Type checking
      run: npm run typecheck
      if: hashFiles('tsconfig.json') != ''
      continue-on-error: true

    - name: Run unit tests
      run: npm run test:ci
      env:
        # Test environment variables
        NODE_ENV: test
        API_URL: http://localhost:3000
        DATABASE_URL: sqlite:///:memory:

    - name: Run integration tests
      run: npm run test:integration
      if: hashFiles('tests/integration/**') != ''
      env:
        NODE_ENV: test

    - name: Build project
      run: npm run build
      if: hashFiles('dist/**') == '' # Only if build directory doesn't exist

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}-${{ matrix.os }}
        path: |
          coverage/
          test-results.xml
          junit.xml
        retention-days: 30

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 60

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm start &
        sleep 30 # Wait for app to start
      env:
        NODE_ENV: production
        PORT: 3000

    - name: Wait for application
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health || curl -f http://localhost:3000; do sleep 2; done'

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:3000

    # Playwright-specific setup (uncomment if using Playwright)
    # - name: Install Playwright browsers
    #   run: npx playwright install --with-deps

    # - name: Run Playwright tests
    #   run: npx playwright test

    # - name: Upload Playwright results
    #   uses: actions/upload-artifact@v3
    #   if: always()
    #   with:
    #     name: playwright-report
    #     path: playwright-report/
    #     retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, security]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "Test results:"
        echo "- Unit tests: ${{ needs.test.result }}"
        echo "- E2E tests: ${{ needs.e2e-tests.result }}"
        echo "- Security scan: ${{ needs.security.result }}"

        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "‚ùå Unit tests failed"
          exit 1
        fi

        if [[ "${{ needs.e2e-tests.result }}" != "success" && "${{ needs.e2e-tests.result }}" != "skipped" ]]; then
          echo "‚ùå E2E tests failed"
          exit 1
        fi

        echo "‚úÖ All tests passed"

    - name: Quality gate passed
      run: echo "üéâ Quality gate passed! Ready for deployment."

  # Optional: Dependency update check
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: high

  # Optional: Performance benchmarking
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance tests
      run: npm run test:performance
      if: hashFiles('package.json') != '' && contains(fromJSON(readFile('package.json')).scripts, 'test:performance')

    - name: Comment performance results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          // Add performance results comment to PR
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Performance tests completed. Check Actions for detailed results.'
          })