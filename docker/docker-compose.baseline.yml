# Docker Compose for Baseline Testing Environment
# Provides consistent testing environment with monitoring and caching

version: '3.8'

services:
  # Main baseline testing service
  baseline-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile.baseline-test
      target: testing
      args:
        - NODE_VERSION=18
        - PYTHON_VERSION=3.11
    container_name: baseline-test
    environment:
      - NODE_ENV=test
      - BASELINE_ENV=docker
      - BASELINE_LOG_LEVEL=INFO
      - BASELINE_PARALLEL=true
      - BASELINE_CACHE_ENABLED=true
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../:/app:delegated
      - baseline_cache:/app/.baseline-cache
      - node_modules_cache:/app/node_modules
      - baseline_logs:/app/logs
    depends_on:
      - redis
    networks:
      - baseline-network
    healthcheck:
      test: ["CMD", "npm", "run", "health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: baseline-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - baseline-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Performance testing service
  baseline-performance:
    build:
      context: ..
      dockerfile: docker/Dockerfile.baseline-test
      target: testing
    container_name: baseline-performance
    environment:
      - NODE_ENV=test
      - BASELINE_ENV=performance
      - BASELINE_TEST_SUITE=performance
      - BASELINE_TIMEOUT=1800  # 30 minutes
    volumes:
      - ../:/app:delegated
      - baseline_cache:/app/.baseline-cache
      - performance_results:/app/performance-results
    depends_on:
      - redis
    networks:
      - baseline-network
    profiles:
      - performance
    command: ["npm", "run", "test:baseline:performance"]

  # Security testing service
  baseline-security:
    build:
      context: ..
      dockerfile: docker/Dockerfile.baseline-test
      target: testing
    container_name: baseline-security
    environment:
      - NODE_ENV=test
      - BASELINE_ENV=security
      - BASELINE_TEST_SUITE=security
    volumes:
      - ../:/app:delegated
      - baseline_cache:/app/.baseline-cache
      - security_results:/app/security-results
    depends_on:
      - redis
    networks:
      - baseline-network
    profiles:
      - security
    command: ["npm", "run", "test:baseline:security"]

  # Monitoring and metrics service
  baseline-monitor:
    image: prom/prometheus:latest
    container_name: baseline-monitor
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - baseline-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Log aggregation service
  baseline-logs:
    image: grafana/loki:2.9.0
    container_name: baseline-logs
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - baseline-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Dashboard service
  baseline-dashboard:
    image: grafana/grafana:10.2.0
    container_name: baseline-dashboard
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=baseline123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - baseline-monitor
      - baseline-logs
    networks:
      - baseline-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Notification service
  baseline-notifications:
    build:
      context: ..
      dockerfile: docker/Dockerfile.notifications
    container_name: baseline-notifications
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_USER=${EMAIL_SMTP_USER}
      - EMAIL_SMTP_PASS=${EMAIL_SMTP_PASS}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../notifications:/app
      - baseline_logs:/app/logs:ro
    depends_on:
      - redis
    networks:
      - baseline-network
    profiles:
      - notifications
    restart: unless-stopped

# Named volumes for persistent data
volumes:
  baseline_cache:
    driver: local
  node_modules_cache:
    driver: local
  baseline_logs:
    driver: local
  redis_data:
    driver: local
  performance_results:
    driver: local
  security_results:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local

# Network configuration
networks:
  baseline-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16