name: Scheduled Baseline Audit

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
    # Run every Monday at 6 AM UTC for comprehensive audit
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of audit to run'
        required: false
        default: 'standard'
        type: choice
        options:
        - standard
        - comprehensive
        - security
        - performance
      notification_level:
        description: 'Notification level'
        required: false
        default: 'normal'
        type: choice
        options:
        - silent
        - normal
        - verbose

env:
  AUDIT_TIMEOUT: 120
  MAX_RETRIES: 5
  NOTIFICATION_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  audit-setup:
    runs-on: ubuntu-latest
    outputs:
      audit-matrix: ${{ steps.setup-audit.outputs.matrix }}
      audit-config: ${{ steps.setup-audit.outputs.config }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup audit configuration
      id: setup-audit
      run: |
        # Determine audit type
        if [ "${{ github.event.schedule }}" = "0 6 * * 1" ] || [ "${{ github.event.inputs.audit_type }}" = "comprehensive" ]; then
          audit_type="comprehensive"
        elif [ "${{ github.event.inputs.audit_type }}" = "security" ]; then
          audit_type="security"
        elif [ "${{ github.event.inputs.audit_type }}" = "performance" ]; then
          audit_type="performance"
        else
          audit_type="standard"
        fi

        # Setup matrix based on audit type
        case $audit_type in
          "comprehensive")
            matrix='{"include":[
              {"suite":"unit","priority":"high","timeout":15},
              {"suite":"integration","priority":"high","timeout":45},
              {"suite":"performance","priority":"medium","timeout":90},
              {"suite":"security","priority":"high","timeout":30},
              {"suite":"compatibility","priority":"low","timeout":60}
            ]}'
            ;;
          "security")
            matrix='{"include":[
              {"suite":"security","priority":"high","timeout":30},
              {"suite":"vulnerability","priority":"high","timeout":20}
            ]}'
            ;;
          "performance")
            matrix='{"include":[
              {"suite":"performance","priority":"high","timeout":90},
              {"suite":"load","priority":"medium","timeout":120}
            ]}'
            ;;
          *)
            matrix='{"include":[
              {"suite":"unit","priority":"high","timeout":15},
              {"suite":"integration","priority":"high","timeout":45}
            ]}'
            ;;
        esac

        echo "matrix=$matrix" >> $GITHUB_OUTPUT

        # Setup configuration
        config=$(cat << EOF
        {
          "audit_type": "$audit_type",
          "notification_level": "${{ github.event.inputs.notification_level || 'normal' }}",
          "baseline_threshold": 90,
          "performance_threshold": 85,
          "security_threshold": 95
        }
        EOF
        )
        echo "config=$config" >> $GITHUB_OUTPUT

  baseline-audit:
    needs: audit-setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.audit-setup.outputs.audit-matrix) }}
      fail-fast: false
    timeout-minutes: ${{ matrix.timeout }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup audit environment
      run: |
        # Create audit directories
        mkdir -p .audit-cache/{logs,results,reports,artifacts}

        # Set environment variables
        echo "AUDIT_SUITE=${{ matrix.suite }}" >> $GITHUB_ENV
        echo "AUDIT_PRIORITY=${{ matrix.priority }}" >> $GITHUB_ENV
        echo "AUDIT_TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
        echo "AUDIT_ID=${{ github.run_id }}_${{ matrix.suite }}" >> $GITHUB_ENV

    - name: Setup Node.js and Python
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies with caching
      run: |
        # Install with retry and caching
        for i in $(seq 1 ${{ env.MAX_RETRIES }}); do
          if npm ci --prefer-offline --no-audit; then
            break
          else
            echo "Install attempt $i failed, retrying..."
            sleep $((i * 2))
          fi
        done

    - name: Run baseline audit
      id: audit
      run: |
        set -e

        echo "Starting ${{ matrix.suite }} audit at $(date)"

        # Function for safe command execution
        safe_exec() {
          local cmd="$1"
          local log_file=".audit-cache/logs/${AUDIT_SUITE}_${AUDIT_TIMESTAMP}.log"

          echo "Executing: $cmd" | tee -a "$log_file"

          if timeout ${{ matrix.timeout }}m bash -c "$cmd" 2>&1 | tee -a "$log_file"; then
            echo "✅ Command succeeded" | tee -a "$log_file"
            return 0
          else
            echo "❌ Command failed with exit code $?" | tee -a "$log_file"
            return 1
          fi
        }

        # Run audit based on suite type
        case "${{ matrix.suite }}" in
          "unit")
            safe_exec "npm run test:baseline:unit -- --coverage --reporter=json > .audit-cache/results/unit-results.json"
            ;;
          "integration")
            safe_exec "npm run test:baseline:integration -- --reporter=json > .audit-cache/results/integration-results.json"
            ;;
          "performance")
            safe_exec "npm run test:baseline:performance -- --reporter=json > .audit-cache/results/performance-results.json"
            ;;
          "security")
            safe_exec "npm audit --json > .audit-cache/results/security-audit.json"
            safe_exec "npm run test:security -- --reporter=json > .audit-cache/results/security-results.json"
            ;;
          "compatibility")
            safe_exec "npm run test:compatibility -- --reporter=json > .audit-cache/results/compatibility-results.json"
            ;;
          "vulnerability")
            safe_exec "npm audit --audit-level=moderate --json > .audit-cache/results/vulnerability-audit.json"
            ;;
          "load")
            safe_exec "npm run test:load -- --reporter=json > .audit-cache/results/load-results.json"
            ;;
        esac

        echo "audit_status=success" >> $GITHUB_OUTPUT

      continue-on-error: true

    - name: Process audit results
      id: process
      run: |
        suite="${{ matrix.suite }}"
        config='${{ needs.audit-setup.outputs.audit-config }}'

        # Get thresholds from config
        baseline_threshold=$(echo "$config" | jq -r '.baseline_threshold')
        performance_threshold=$(echo "$config" | jq -r '.performance_threshold')
        security_threshold=$(echo "$config" | jq -r '.security_threshold')

        # Process results based on suite
        result_file=".audit-cache/results/${suite}-results.json"
        audit_file=".audit-cache/results/${suite}-audit.json"

        score=0
        status="unknown"
        issues=""

        if [ -f "$result_file" ]; then
          # Parse test results
          if command -v jq >/dev/null; then
            score=$(jq -r '.stats.passes / (.stats.passes + .stats.failures) * 100 // 0' "$result_file" 2>/dev/null || echo "0")
            failures=$(jq -r '.stats.failures // 0' "$result_file" 2>/dev/null || echo "0")

            if [ "$failures" -gt 0 ]; then
              issues="$failures test failures"
            fi
          fi
        elif [ -f "$audit_file" ]; then
          # Parse audit results
          if command -v jq >/dev/null; then
            vulnerabilities=$(jq -r '.metadata.vulnerabilities.total // 0' "$audit_file" 2>/dev/null || echo "0")

            if [ "$vulnerabilities" -gt 0 ]; then
              score=50
              issues="$vulnerabilities vulnerabilities found"
            else
              score=100
            fi
          fi
        fi

        # Determine status based on suite and threshold
        case "$suite" in
          "performance"|"load")
            threshold=$performance_threshold
            ;;
          "security"|"vulnerability")
            threshold=$security_threshold
            ;;
          *)
            threshold=$baseline_threshold
            ;;
        esac

        if [ $(echo "$score >= $threshold" | bc -l) -eq 1 ]; then
          status="pass"
        else
          status="fail"
        fi

        echo "score=$score" >> $GITHUB_OUTPUT
        echo "status=$status" >> $GITHUB_OUTPUT
        echo "issues=$issues" >> $GITHUB_OUTPUT
        echo "threshold=$threshold" >> $GITHUB_OUTPUT

    - name: Generate audit report
      run: |
        cat > .audit-cache/reports/${AUDIT_SUITE}_report.md << EOF
        # Audit Report: ${{ matrix.suite }} Suite

        **Audit ID**: ${AUDIT_ID}
        **Timestamp**: ${AUDIT_TIMESTAMP}
        **Status**: ${{ steps.process.outputs.status }}
        **Score**: ${{ steps.process.outputs.score }}%
        **Threshold**: ${{ steps.process.outputs.threshold }}%
        **Priority**: ${{ matrix.priority }}

        ## Summary

        $(if [ "${{ steps.process.outputs.status }}" = "pass" ]; then
          echo "✅ Audit passed successfully"
        else
          echo "❌ Audit failed - ${{ steps.process.outputs.issues }}"
        fi)

        ## Detailed Results

        \`\`\`json
        $(find .audit-cache/results -name "*${{ matrix.suite }}*" -type f -exec cat {} \; 2>/dev/null | head -100)
        \`\`\`

        ## Logs

        \`\`\`
        $(tail -50 .audit-cache/logs/${AUDIT_SUITE}_${AUDIT_TIMESTAMP}.log 2>/dev/null || echo "No logs available")
        \`\`\`

        ## Recommendations

        $(case "${{ matrix.suite }}" in
          "unit"|"integration")
            echo "- Review failed test cases and fix underlying issues"
            echo "- Update test coverage to improve baseline scores"
            ;;
          "performance"|"load")
            echo "- Optimize slow-running operations identified in tests"
            echo "- Consider caching strategies for performance improvements"
            ;;
          "security"|"vulnerability")
            echo "- Update dependencies with known vulnerabilities"
            echo "- Review security test failures and implement fixes"
            ;;
        esac)
        EOF

    - name: Upload audit artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: audit-${{ matrix.suite }}-${{ github.run_id }}
        path: |
          .audit-cache/
        retention-days: 90

  audit-summary:
    needs: [audit-setup, baseline-audit]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Download all audit artifacts
      uses: actions/download-artifact@v3
      with:
        path: audit-artifacts/

    - name: Aggregate audit results
      id: aggregate
      run: |
        config='${{ needs.audit-setup.outputs.audit-config }}'
        notification_level=$(echo "$config" | jq -r '.notification_level')

        total_score=0
        total_suites=0
        failed_suites=""
        critical_issues=""

        # Process each audit artifact
        for artifact in audit-artifacts/audit-*; do
          if [ -d "$artifact" ]; then
            suite=$(basename "$artifact" | sed 's/audit-\(.*\)-[0-9]*/\1/')

            # Look for results in the artifact
            for result_file in "$artifact"/**/*results*.json "$artifact"/**/*audit*.json; do
              if [ -f "$result_file" ]; then
                # Extract score based on file type
                if [[ "$result_file" == *"audit"* ]]; then
                  # Security audit file
                  vulns=$(jq -r '.metadata.vulnerabilities.total // 0' "$result_file" 2>/dev/null || echo "0")
                  if [ "$vulns" -gt 0 ]; then
                    score=50
                    if [ "$vulns" -gt 5 ]; then
                      critical_issues="$critical_issues $suite($vulns-vulns)"
                    fi
                  else
                    score=100
                  fi
                else
                  # Test results file
                  score=$(jq -r '.stats.passes / (.stats.passes + .stats.failures) * 100 // 0' "$result_file" 2>/dev/null || echo "0")
                fi

                # Check if suite failed
                threshold=90
                if [ $(echo "$score < $threshold" | bc -l) -eq 1 ]; then
                  failed_suites="$failed_suites $suite"
                fi

                total_score=$((total_score + score))
                total_suites=$((total_suites + 1))
                break
              fi
            done
          fi
        done

        # Calculate averages
        if [ $total_suites -gt 0 ]; then
          avg_score=$((total_score / total_suites))
        else
          avg_score=0
        fi

        # Determine overall status
        if [ -n "$critical_issues" ]; then
          overall_status="critical"
        elif [ -n "$failed_suites" ]; then
          overall_status="warning"
        else
          overall_status="success"
        fi

        echo "avg_score=$avg_score" >> $GITHUB_OUTPUT
        echo "failed_suites=$failed_suites" >> $GITHUB_OUTPUT
        echo "critical_issues=$critical_issues" >> $GITHUB_OUTPUT
        echo "overall_status=$overall_status" >> $GITHUB_OUTPUT
        echo "notification_level=$notification_level" >> $GITHUB_OUTPUT

    - name: Send notifications
      if: steps.aggregate.outputs.notification_level != 'silent'
      run: |
        overall_status="${{ steps.aggregate.outputs.overall_status }}"
        avg_score="${{ steps.aggregate.outputs.avg_score }}"
        failed_suites="${{ steps.aggregate.outputs.failed_suites }}"
        critical_issues="${{ steps.aggregate.outputs.critical_issues }}"
        notification_level="${{ steps.aggregate.outputs.notification_level }}"

        # Determine notification details
        case $overall_status in
          "critical")
            emoji="🚨"
            color="#ff0000"
            title="CRITICAL: Baseline Audit Failed"
            ;;
          "warning")
            emoji="⚠️"
            color="#ffa500"
            title="WARNING: Baseline Audit Issues"
            ;;
          *)
            emoji="✅"
            color="#00ff00"
            title="SUCCESS: Baseline Audit Passed"
            ;;
        esac

        # Create notification payload
        payload=$(cat << EOF
        {
          "text": "$emoji $title",
          "attachments": [
            {
              "color": "$color",
              "fields": [
                {
                  "title": "Overall Score",
                  "value": "${avg_score}%",
                  "short": true
                },
                {
                  "title": "Status",
                  "value": "$overall_status",
                  "short": true
                },
                {
                  "title": "Failed Suites",
                  "value": "${failed_suites:-None}",
                  "short": false
                }
                $(if [ -n "$critical_issues" ]; then
                  echo ",{\"title\": \"Critical Issues\", \"value\": \"$critical_issues\", \"short\": false}"
                fi)
              ],
              "footer": "Baseline Audit System",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )

        # Send to Slack if webhook is configured
        if [ -n "${{ env.NOTIFICATION_WEBHOOK }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
               --data "$payload" \
               "${{ env.NOTIFICATION_WEBHOOK }}" || echo "Failed to send Slack notification"
        fi

        # Send email notification for critical issues
        if [ "$overall_status" = "critical" ] && [ "$notification_level" = "verbose" ]; then
          echo "Critical baseline issues detected - email notification would be sent"
        fi

    - name: Create issue for critical failures
      if: steps.aggregate.outputs.overall_status == 'critical'
      uses: actions/github-script@v6
      with:
        script: |
          const criticalIssues = '${{ steps.aggregate.outputs.critical_issues }}';
          const failedSuites = '${{ steps.aggregate.outputs.failed_suites }}';

          const issueBody = `🚨 **Critical Baseline Audit Failure**

          The scheduled baseline audit has detected critical issues that require immediate attention.

          **Failed Test Suites**: ${failedSuites}
          **Critical Issues**: ${criticalIssues}
          **Audit Run**: ${{ github.run_id }}

          ## Action Required

          1. Review the failed test suites and critical vulnerabilities
          2. Address security vulnerabilities immediately
          3. Fix failing baseline tests
          4. Re-run the audit to verify fixes

          ## Audit Details

          - **Audit Time**: ${new Date().toISOString()}
          - **Repository**: ${{ github.repository }}
          - **Branch**: ${{ github.ref }}

          [View Audit Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          This issue was automatically created by the Baseline Audit System.`;

          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Critical Baseline Audit Failure - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['critical', 'baseline-audit', 'automated']
          });