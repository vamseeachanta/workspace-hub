#!/bin/bash
# ABOUTME: Interactive workspace sync CLI with drill-down menus for repos, MCPs, uv, npm, and agents
# ABOUTME: Provides a user-friendly menu system to selectively sync different workspace components

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKSPACE_ROOT="$(dirname "$SCRIPT_DIR")"
CONFIG_FILE="${WORKSPACE_ROOT}/config/sync-items.json"
LOG_FILE="${WORKSPACE_ROOT}/logs/sync-$(date +%Y%m%d-%H%M%S).log"

mkdir -p "${WORKSPACE_ROOT}/logs"

# Helper functions
print_header() {
    clear
    echo -e "${CYAN}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║${NC}          ${MAGENTA}Workspace Hub Sync Manager${NC}                  ${CYAN}║${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_menu_header() {
    echo -e "${BLUE}═══════════════════════════════════════════════════════════${NC}"
    echo -e "${BLUE}  $1${NC}"
    echo -e "${BLUE}═══════════════════════════════════════════════════════════${NC}"
    echo ""
}

log_info() {
    echo -e "${BLUE}ℹ${NC} $@" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}✓${NC} $@" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}⚠${NC} $@" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}✗${NC} $@" | tee -a "$LOG_FILE"
}

pause() {
    echo ""
    read -p "Press Enter to continue..."
}

check_dependencies() {
    if ! command -v jq &> /dev/null; then
        log_error "jq is required but not installed. Install with: sudo apt install jq"
        exit 1
    fi
}

# Git Repository Functions
sync_single_repo() {
    local repo=$1
    local repo_path="${WORKSPACE_ROOT}/${repo}"
    
    if [ ! -d "$repo_path/.git" ]; then
        log_error "$repo is not a git repository"
        return 1
    fi
    
    log_info "Syncing: $repo"
    cd "$repo_path"
    
    # Check for uncommitted changes
    if ! git diff-index --quiet HEAD -- 2>/dev/null; then
        log_warning "Uncommitted changes detected, stashing..."
        git stash save "Auto-stash $(date +%Y%m%d-%H%M%S)" >> "$LOG_FILE" 2>&1
    fi
    
    # Fetch and pull
    if git fetch origin >> "$LOG_FILE" 2>&1 && git pull --rebase origin $(git rev-parse --abbrev-ref HEAD) >> "$LOG_FILE" 2>&1; then
        log_success "$repo synced successfully"
        
        # Pop stash if exists
        if git stash list | grep -q "Auto-stash"; then
            if git stash pop >> "$LOG_FILE" 2>&1; then
                log_success "Stash applied"
            else
                log_warning "Stash could not be applied (conflicts?)"
            fi
        fi
        return 0
    else
        log_error "$repo sync failed"
        return 1
    fi
}

sync_all_repos() {
    local repos=($(jq -r '.sync_items.git_repositories.repos[]' "$CONFIG_FILE"))
    local total=${#repos[@]}
    local success=0
    local failed=0
    
    log_info "Syncing all $total repositories..."
    echo ""
    
    for repo in "${repos[@]}"; do
        if sync_single_repo "$repo"; then
            ((success++))
        else
            ((failed++))
        fi
    done
    
    echo ""
    log_info "Summary: ${GREEN}$success succeeded${NC}, ${RED}$failed failed${NC} (total: $total)"
}

git_repos_menu() {
    while true; do
        print_header
        print_menu_header "Git Repositories"
        
        echo "  1) Sync all repositories"
        echo "  2) Sync specific repository"
        echo "  3) List all repositories"
        echo "  0) Back to main menu"
        echo ""
        read -p "Select option: " choice
        
        case $choice in
            1)
                echo ""
                sync_all_repos
                pause
                ;;
            2)
                echo ""
                local repos=($(jq -r '.sync_items.git_repositories.repos[]' "$CONFIG_FILE"))
                echo "Available repositories:"
                echo ""
                for i in "${!repos[@]}"; do
                    printf "  %2d) %s\n" $((i+1)) "${repos[$i]}"
                done
                echo ""
                read -p "Select repository (1-${#repos[@]}): " repo_num
                
                if [[ "$repo_num" =~ ^[0-9]+$ ]] && [ "$repo_num" -ge 1 ] && [ "$repo_num" -le "${#repos[@]}" ]; then
                    echo ""
                    sync_single_repo "${repos[$((repo_num-1))]}"
                    pause
                else
                    log_error "Invalid selection"
                    pause
                fi
                ;;
            3)
                echo ""
                local repos=($(jq -r '.sync_items.git_repositories.repos[]' "$CONFIG_FILE"))
                echo "All repositories (${#repos[@]} total):"
                echo ""
                for repo in "${repos[@]}"; do
                    echo "  • $repo"
                done
                pause
                ;;
            0)
                return
                ;;
            *)
                log_error "Invalid option"
                pause
                ;;
        esac
    done
}

# MCP Server Functions
install_mcp_server() {
    local name=$1
    local command=$2
    shift 2
    local args="$@"
    
    if ! command -v claude &> /dev/null; then
        log_error "Claude CLI not found"
        return 1
    fi
    
    log_info "Installing MCP server: $name"
    
    if claude mcp add "$name" "$command" $args >> "$LOG_FILE" 2>&1; then
        log_success "$name installed successfully"
        return 0
    else
        log_warning "$name installation failed (may already exist)"
        return 1
    fi
}

install_all_mcp_servers() {
    local servers_count=$(jq '.sync_items.mcp_servers.servers | length' "$CONFIG_FILE")
    local success=0
    
    log_info "Installing all MCP servers..."
    echo ""
    
    for ((i=0; i<$servers_count; i++)); do
        local name=$(jq -r ".sync_items.mcp_servers.servers[$i].name" "$CONFIG_FILE")
        local command=$(jq -r ".sync_items.mcp_servers.servers[$i].command" "$CONFIG_FILE")
        local args=$(jq -r ".sync_items.mcp_servers.servers[$i].args | join(\" \")" "$CONFIG_FILE")
        
        if install_mcp_server "$name" "$command" $args; then
            ((success++))
        fi
    done
    
    echo ""
    log_info "Summary: $success servers installed"
}

list_mcp_servers() {
    if ! command -v claude &> /dev/null; then
        log_error "Claude CLI not found"
        return
    fi
    
    log_info "Checking MCP server status..."
    echo ""
    claude mcp list
}

mcp_servers_menu() {
    while true; do
        print_header
        print_menu_header "MCP Servers"
        
        echo "  1) Install all MCP servers"
        echo "  2) Install specific MCP server"
        echo "  3) List installed MCP servers"
        echo "  4) List available MCP servers"
        echo "  0) Back to main menu"
        echo ""
        read -p "Select option: " choice
        
        case $choice in
            1)
                echo ""
                install_all_mcp_servers
                pause
                ;;
            2)
                echo ""
                local servers_count=$(jq '.sync_items.mcp_servers.servers | length' "$CONFIG_FILE")
                echo "Available MCP servers:"
                echo ""
                for ((i=0; i<$servers_count; i++)); do
                    local name=$(jq -r ".sync_items.mcp_servers.servers[$i].name" "$CONFIG_FILE")
                    printf "  %2d) %s\n" $((i+1)) "$name"
                done
                echo ""
                read -p "Select server (1-$servers_count): " server_num
                
                if [[ "$server_num" =~ ^[0-9]+$ ]] && [ "$server_num" -ge 1 ] && [ "$server_num" -le "$servers_count" ]; then
                    local idx=$((server_num-1))
                    local name=$(jq -r ".sync_items.mcp_servers.servers[$idx].name" "$CONFIG_FILE")
                    local command=$(jq -r ".sync_items.mcp_servers.servers[$idx].command" "$CONFIG_FILE")
                    local args=$(jq -r ".sync_items.mcp_servers.servers[$idx].args | join(\" \")" "$CONFIG_FILE")
                    echo ""
                    install_mcp_server "$name" "$command" $args
                    pause
                else
                    log_error "Invalid selection"
                    pause
                fi
                ;;
            3)
                echo ""
                list_mcp_servers
                pause
                ;;
            4)
                echo ""
                local servers_count=$(jq '.sync_items.mcp_servers.servers | length' "$CONFIG_FILE")
                echo "Available MCP servers in config:"
                echo ""
                for ((i=0; i<$servers_count; i++)); do
                    local name=$(jq -r ".sync_items.mcp_servers.servers[$i].name" "$CONFIG_FILE")
                    local command=$(jq -r ".sync_items.mcp_servers.servers[$i].command" "$CONFIG_FILE")
                    local args=$(jq -r ".sync_items.mcp_servers.servers[$i].args | join(\" \")" "$CONFIG_FILE")
                    echo "  • $name"
                    echo "    Command: $command $args"
                    echo ""
                done
                pause
                ;;
            0)
                return
                ;;
            *)
                log_error "Invalid option"
                pause
                ;;
        esac
    done
}

# UV Environment Functions
setup_uv() {
    if command -v uv &> /dev/null; then
        log_success "uv already installed"
        log_info "Updating to latest version..."
        if uv self update >> "$LOG_FILE" 2>&1; then
            log_success "uv updated successfully"
        else
            log_warning "uv update failed"
        fi
    else
        log_info "Installing uv..."
        if curl -LsSf https://astral.sh/uv/install.sh | sh; then
            log_success "uv installed successfully"
        else
            log_error "uv installation failed"
            return 1
        fi
    fi
}

find_uv_repos() {
    local repos=()
    for dir in "$WORKSPACE_ROOT"/*/; do
        local repo_name=$(basename "$dir")
        if [ -f "$dir/pyproject.toml" ]; then
            repos+=("$repo_name")
        fi
    done
    echo "${repos[@]}"
}

sync_repo_uv_env() {
    local repo=$1
    local repo_path="${WORKSPACE_ROOT}/${repo}"
    
    if [ ! -f "$repo_path/pyproject.toml" ]; then
        log_error "$repo does not have pyproject.toml"
        return 1
    fi
    
    if ! command -v uv &> /dev/null; then
        log_error "uv is not installed"
        return 1
    fi
    
    log_info "Syncing UV environment for: $repo"
    cd "$repo_path"
    
    if uv sync >> "$LOG_FILE" 2>&1; then
        log_success "$repo UV environment synced"
        return 0
    else
        log_error "$repo UV sync failed"
        return 1
    fi
}

sync_all_uv_envs() {
    local repos=($(find_uv_repos))
    local total=${#repos[@]}
    local success=0
    local failed=0
    
    if [ "$total" -eq 0 ]; then
        log_warning "No repositories with pyproject.toml found"
        return
    fi
    
    log_info "Found $total repositories with UV environments"
    echo ""
    
    for repo in "${repos[@]}"; do
        if sync_repo_uv_env "$repo"; then
            ((success++))
        else
            ((failed++))
        fi
    done
    
    echo ""
    log_info "Summary: ${GREEN}$success succeeded${NC}, ${RED}$failed failed${NC} (total: $total)"
}

list_uv_repos() {
    local repos=($(find_uv_repos))
    
    if [ "${#repos[@]}" -eq 0 ]; then
        log_warning "No repositories with pyproject.toml found"
        return
    fi
    
    echo "Repositories with UV environments (${#repos[@]} total):"
    echo ""
    
    for repo in "${repos[@]}"; do
        local repo_path="${WORKSPACE_ROOT}/${repo}"
        local has_lock=""
        
        if [ -f "$repo_path/uv.lock" ]; then
            has_lock=" ${GREEN}[locked]${NC}"
        else
            has_lock=" ${YELLOW}[no lock]${NC}"
        fi
        
        echo -e "  • $repo$has_lock"
    done
}

uv_menu() {
    while true; do
        print_header
        print_menu_header "UV Environment Manager"
        
        echo "  1) Install/Update uv tool"
        echo "  2) Check uv status"
        echo "  3) List repos with UV environments"
        echo "  4) Sync all repo UV environments"
        echo "  5) Sync specific repo UV environment"
        echo "  0) Back to main menu"
        echo ""
        read -p "Select option: " choice
        
        case $choice in
            1)
                echo ""
                setup_uv
                pause
                ;;
            2)
                echo ""
                if command -v uv &> /dev/null; then
                    log_success "uv is installed"
                    uv --version
                else
                    log_warning "uv is not installed"
                fi
                pause
                ;;
            3)
                echo ""
                list_uv_repos
                pause
                ;;
            4)
                echo ""
                sync_all_uv_envs
                pause
                ;;
            5)
                echo ""
                local repos=($(find_uv_repos))
                
                if [ "${#repos[@]}" -eq 0 ]; then
                    log_warning "No repositories with pyproject.toml found"
                    pause
                    continue
                fi
                
                echo "Repositories with UV environments:"
                echo ""
                for i in "${!repos[@]}"; do
                    printf "  %2d) %s\n" $((i+1)) "${repos[$i]}"
                done
                echo ""
                read -p "Select repository (1-${#repos[@]}): " repo_num
                
                if [[ "$repo_num" =~ ^[0-9]+$ ]] && [ "$repo_num" -ge 1 ] && [ "$repo_num" -le "${#repos[@]}" ]; then
                    echo ""
                    sync_repo_uv_env "${repos[$((repo_num-1))]}"
                    pause
                else
                    log_error "Invalid selection"
                    pause
                fi
                ;;
            0)
                return
                ;;
            *)
                log_error "Invalid option"
                pause
                ;;
        esac
    done
}

# NPM Packages Functions
install_npm_package() {
    local package=$1
    
    if ! command -v npm &> /dev/null; then
        log_error "npm not found"
        return 1
    fi
    
    local package_name=$(echo "$package" | cut -d'@' -f1)
    
    if npm list -g "$package_name" &> /dev/null; then
        log_success "$package already installed"
        return 0
    else
        log_info "Installing: $package"
        if npm install -g "$package" >> "$LOG_FILE" 2>&1; then
            log_success "$package installed successfully"
            return 0
        else
            log_error "$package installation failed"
            return 1
        fi
    fi
}

install_all_npm_packages() {
    local packages=($(jq -r '.sync_items.npm_packages.global_packages[]' "$CONFIG_FILE"))
    local success=0
    
    log_info "Installing all npm packages..."
    echo ""
    
    for package in "${packages[@]}"; do
        if install_npm_package "$package"; then
            ((success++))
        fi
    done
    
    echo ""
    log_info "Summary: $success packages processed"
}

npm_menu() {
    while true; do
        print_header
        print_menu_header "NPM Global Packages"
        
        echo "  1) Install all packages"
        echo "  2) Install specific package"
        echo "  3) List packages"
        echo "  0) Back to main menu"
        echo ""
        read -p "Select option: " choice
        
        case $choice in
            1)
                echo ""
                install_all_npm_packages
                pause
                ;;
            2)
                echo ""
                local packages=($(jq -r '.sync_items.npm_packages.global_packages[]' "$CONFIG_FILE"))
                echo "Available packages:"
                echo ""
                for i in "${!packages[@]}"; do
                    printf "  %2d) %s\n" $((i+1)) "${packages[$i]}"
                done
                echo ""
                read -p "Select package (1-${#packages[@]}): " pkg_num
                
                if [[ "$pkg_num" =~ ^[0-9]+$ ]] && [ "$pkg_num" -ge 1 ] && [ "$pkg_num" -le "${#packages[@]}" ]; then
                    echo ""
                    install_npm_package "${packages[$((pkg_num-1))]}"
                    pause
                else
                    log_error "Invalid selection"
                    pause
                fi
                ;;
            3)
                echo ""
                local packages=($(jq -r '.sync_items.npm_packages.global_packages[]' "$CONFIG_FILE"))
                echo "Configured npm packages:"
                echo ""
                for package in "${packages[@]}"; do
                    echo "  • $package"
                done
                pause
                ;;
            0)
                return
                ;;
            *)
                log_error "Invalid option"
                pause
                ;;
        esac
    done
}

# Agent Config Functions
agent_config_menu() {
    while true; do
        print_header
        print_menu_header "Agent Configurations"
        
        echo "  1) Check agent config directories"
        echo "  2) Create missing directories"
        echo "  0) Back to main menu"
        echo ""
        read -p "Select option: " choice
        
        case $choice in
            1)
                echo ""
                local config_paths=($(jq -r '.sync_items.agent_configs.config_files[]' "$CONFIG_FILE"))
                echo "Agent config directories:"
                echo ""
                for config_path in "${config_paths[@]}"; do
                    local expanded_path="${config_path/#\~/$HOME}"
                    if [ -d "$expanded_path" ]; then
                        echo -e "  ${GREEN}✓${NC} $config_path"
                    else
                        echo -e "  ${RED}✗${NC} $config_path (missing)"
                    fi
                done
                pause
                ;;
            2)
                echo ""
                local config_paths=($(jq -r '.sync_items.agent_configs.config_files[]' "$CONFIG_FILE"))
                for config_path in "${config_paths[@]}"; do
                    local expanded_path="${config_path/#\~/$HOME}"
                    if [ ! -d "$expanded_path" ]; then
                        mkdir -p "$expanded_path"
                        log_success "Created: $config_path"
                    else
                        log_info "Already exists: $config_path"
                    fi
                done
                pause
                ;;
            0)
                return
                ;;
            *)
                log_error "Invalid option"
                pause
                ;;
        esac
    done
}

# Sync All Function
sync_all() {
    print_header
    print_menu_header "Sync Everything"
    
    log_info "Starting full workspace sync..."
    echo ""
    
    log_info "=== Git Repositories ==="
    sync_all_repos
    echo ""
    
    log_info "=== MCP Servers ==="
    install_all_mcp_servers
    echo ""
    
    log_info "=== UV Environment ==="
    setup_uv
    echo ""
    sync_all_uv_envs
    echo ""
    
    log_info "=== NPM Packages ==="
    install_all_npm_packages
    echo ""
    
    log_success "Full sync complete!"
    log_info "Log file: $LOG_FILE"
}

# Main Menu
main_menu() {
    while true; do
        print_header
        print_menu_header "Main Menu"
        
        echo "  1) Git Repositories"
        echo "  2) MCP Servers"
        echo "  3) UV Environment"
        echo "  4) NPM Packages"
        echo "  5) Agent Configurations"
        echo ""
        echo "  ${GREEN}9) Sync Everything${NC}"
        echo "  ${YELLOW}0) Exit${NC}"
        echo ""
        read -p "Select option: " choice
        
        case $choice in
            1) git_repos_menu ;;
            2) mcp_servers_menu ;;
            3) uv_menu ;;
            4) npm_menu ;;
            5) agent_config_menu ;;
            9) sync_all; pause ;;
            0) 
                echo ""
                log_info "Exiting..."
                exit 0
                ;;
            *)
                log_error "Invalid option"
                pause
                ;;
        esac
    done
}

# Entry point
check_dependencies

if [ ! -f "$CONFIG_FILE" ]; then
    log_error "Config file not found: $CONFIG_FILE"
    exit 1
fi

main_menu
