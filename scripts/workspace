#!/bin/bash

# ABOUTME: Unified workspace management CLI with multi-level menu navigation
# ABOUTME: Provides organized access to all workspace tools and scripts

set -e

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKSPACE_ROOT="$(dirname "$SCRIPT_DIR")"
SCRIPTS_DIR="$SCRIPT_DIR"

# Function to show header
show_menu_header() {
    clear
    echo -e "${BOLD}${BLUE}╔════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BOLD}${BLUE}║              Workspace Hub - Management Console               ║${NC}"
    echo -e "${BOLD}${BLUE}╚════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

# Function to read user choice
read_choice() {
    local prompt="$1"
    echo -ne "${YELLOW}$prompt${NC}"
    read choice
    echo "$choice"
}

# Function to pause
pause() {
    echo ""
    echo -ne "${YELLOW}Press ENTER to continue...${NC}"
    read
}

#==============================================================================
# Level 1: Main Menu
#==============================================================================

show_main_menu() {
    while true; do
        show_menu_header

        echo -e "${BOLD}Workspace Management:${NC}"
        echo ""
        echo -e "  ${CYAN}1)${NC} Repository Management"
        echo -e "  ${CYAN}2)${NC} Compliance & Standards"
        echo -e "  ${CYAN}3)${NC} Remote Connection Tools"
        echo -e "  ${CYAN}4)${NC} Development Tools"
        echo -e "  ${CYAN}5)${NC} System Setup & Configuration"
        echo -e "  ${CYAN}6)${NC} Help & Documentation"
        echo ""
        echo -e "  ${RED}0)${NC} Exit"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1) show_repository_menu ;;
            2) show_compliance_menu ;;
            3) show_connection_menu ;;
            4) show_development_menu ;;
            5) show_system_menu ;;
            6) show_help_menu ;;
            0) exit 0 ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

#==============================================================================
# Level 2: Repository Management Menu
#==============================================================================

show_repository_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}Repository Management${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Repository Sync Manager          → Multi-repo git operations"
        echo -e "  ${CYAN}2)${NC} Configure Repository URLs        → Setup GitHub repository URLs"
        echo -e "  ${CYAN}3)${NC} Check All Repository Status      → Quick status check"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back to Main Menu"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1)
                "$WORKSPACE_ROOT/repository_sync"
                pause
                ;;
            2)
                bash "$SCRIPTS_DIR/repository/configure_repos.sh"
                pause
                ;;
            3)
                bash "$SCRIPTS_DIR/repository/check_all_status.sh"
                pause
                ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

#==============================================================================
# Level 2: Compliance & Standards Menu
#==============================================================================

show_compliance_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}Compliance & Standards${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Propagation Tools                → Submen

u"
        echo -e "  ${CYAN}2)${NC} Compliance Enforcement           → Submenu"
        echo -e "  ${CYAN}3)${NC} Verification Tools               → Verify compliance status"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back to Main Menu"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1) show_propagation_menu ;;
            2) show_compliance_enforcement_menu ;;
            3)
                bash "$SCRIPTS_DIR/compliance/verify_compliance.sh"
                pause
                ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

# Level 3: Propagation Tools Submenu
show_propagation_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}Propagation Tools${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Propagate Claude Configuration   → Sync CLAUDE.md to all repos"
        echo -e "  ${CYAN}2)${NC} Propagate Guidelines             → Sync AI usage guidelines"
        echo -e "  ${CYAN}3)${NC} Propagate Interactive Mode       → Enable question-asking mode"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1)
                python3 "$SCRIPTS_DIR/compliance/propagate_claude_config.py"
                pause
                ;;
            2)
                bash "$SCRIPTS_DIR/compliance/propagate_guidelines.sh"
                pause
                ;;
            3)
                bash "$SCRIPTS_DIR/compliance/propagate_interactive_mode.sh"
                pause
                ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

# Level 3: Compliance Enforcement Submenu
show_compliance_enforcement_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}Compliance Enforcement${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Setup Compliance                 → Initial compliance setup"
        echo -e "  ${CYAN}2)${NC} Install Compliance Hooks         → Install git hooks for compliance"
        echo -e "  ${CYAN}3)${NC} Verify Compliance                → Check compliance status"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1)
                bash "$SCRIPTS_DIR/compliance/setup_compliance.sh"
                pause
                ;;
            2)
                bash "$SCRIPTS_DIR/compliance/install_compliance_hooks.sh"
                pause
                ;;
            3)
                bash "$SCRIPTS_DIR/compliance/verify_compliance.sh"
                pause
                ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

#==============================================================================
# Level 2: Remote Connection Tools Menu
#==============================================================================

show_connection_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}Remote Connection Tools${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Linux Connection Tools           → Submenu"
        echo -e "  ${CYAN}2)${NC} Windows Connection Tools         → Submenu"
        echo -e "  ${CYAN}3)${NC} Tailscale Connection Tools       → Submenu"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back to Main Menu"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1) show_linux_connection_menu ;;
            2) show_windows_connection_menu ;;
            3) show_tailscale_connection_menu ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

# Level 3: Linux Connection Submenu
show_linux_connection_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}Linux Connection Tools${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Connect to Workspace (Linux)    → Standard SSH connection"
        echo -e "  ${CYAN}2)${NC} Sync Tabby Configuration (Linux) → Sync Tabby terminal config"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1)
                bash "$SCRIPTS_DIR/connection/connect-workspace-linux.sh"
                pause
                ;;
            2)
                bash "$SCRIPTS_DIR/connection/sync-tabby-linux.sh"
                pause
                ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

# Level 3: Windows Connection Submenu
show_windows_connection_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}Windows Connection Tools${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Connect to Workspace (Windows)  → PowerShell connection script"
        echo -e "  ${CYAN}2)${NC} Sync Tabby Configuration (Win)  → Sync Tabby terminal config"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1)
                echo -e "${YELLOW}Run the following PowerShell script on Windows:${NC}"
                echo "$SCRIPTS_DIR/connection/connect-workspace-windows.ps1"
                pause
                ;;
            2)
                echo -e "${YELLOW}Run the following PowerShell script on Windows:${NC}"
                echo "$SCRIPTS_DIR/connection/sync-tabby-windows.ps1"
                pause
                ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

# Level 3: Tailscale Connection Submenu
show_tailscale_connection_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}Tailscale Connection Tools${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Connect via Tailscale (Bash)    → Linux/Mac connection"
        echo -e "  ${CYAN}2)${NC} Connect via Tailscale (PS)      → Windows connection"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1)
                bash "$SCRIPTS_DIR/connection/connect-workspace-tailscale.sh"
                pause
                ;;
            2)
                echo -e "${YELLOW}Run the following PowerShell script on Windows:${NC}"
                echo "$SCRIPTS_DIR/connection/connect-workspace-tailscale.ps1"
                pause
                ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

#==============================================================================
# Level 2: Development Tools Menu
#==============================================================================

show_development_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}Development Tools${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Factory.ai Tools                 → AI-powered development tools"
        echo -e "  ${CYAN}2)${NC} Refactor Analysis                → Code quality and refactoring analysis"
        echo -e "  ${CYAN}3)${NC} Droid CLI                        → Factory.ai droid command wrapper"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back to Main Menu"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1)
                bash "$SCRIPTS_DIR/development/install_factory_ai.sh"
                pause
                ;;
            2)
                bash "$SCRIPTS_DIR/development/refactor-analysis.sh"
                pause
                ;;
            3)
                bash "$SCRIPTS_DIR/development/droid" --help
                pause
                ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

#==============================================================================
# Level 2: System Setup & Configuration Menu
#==============================================================================

show_system_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}System Setup & Configuration${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Workspace Sync                   → Full workspace synchronization"
        echo -e "  ${CYAN}2)${NC} Setup XRDP (Remote Desktop)     → Configure remote desktop access"
        echo -e "  ${CYAN}3)${NC} View System Information          → Display workspace details"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back to Main Menu"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1)
                bash "$SCRIPTS_DIR/system/sync"
                pause
                ;;
            2)
                bash "$SCRIPTS_DIR/system/setup_xrdp.sh"
                pause
                ;;
            3)
                show_system_info
                pause
                ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

# Helper function to show system info
show_system_info() {
    echo -e "${BOLD}Workspace Information:${NC}"
    echo ""
    echo -e "  Workspace Root: ${CYAN}$WORKSPACE_ROOT${NC}"
    echo -e "  Scripts Directory: ${CYAN}$SCRIPTS_DIR${NC}"
    echo ""
    echo -e "  Total Repositories: ${GREEN}$(ls -1 "$WORKSPACE_ROOT" | grep -v "^\." | wc -l)${NC}"
    echo ""
    echo -e "  Available Scripts:"
    find "$SCRIPTS_DIR" -type f -name "*.sh" -o -name "*.py" | sed 's|.*/||' | sort | sed 's/^/    - /'
    echo ""
}

#==============================================================================
# Level 2: Help & Documentation Menu
#==============================================================================

show_help_menu() {
    while true; do
        show_menu_header
        echo -e "${BOLD}Help & Documentation${NC}"
        echo ""

        echo -e "  ${CYAN}1)${NC} Repository Sync Documentation    → View repository_sync help"
        echo -e "  ${CYAN}2)${NC} View README                      → Main workspace documentation"
        echo -e "  ${CYAN}3)${NC} Available Commands               → List all CLI commands"
        echo -e "  ${CYAN}4)${NC} Quick Start Guide                → Getting started tutorial"
        echo ""
        echo -e "  ${YELLOW}0)${NC} Back to Main Menu"
        echo ""

        choice=$(read_choice "Select option: ")

        case "$choice" in
            1)
                "$WORKSPACE_ROOT/repository_sync" help
                pause
                ;;
            2)
                if [[ -f "$WORKSPACE_ROOT/README.md" ]]; then
                    less "$WORKSPACE_ROOT/README.md"
                else
                    echo -e "${YELLOW}README.md not found${NC}"
                    pause
                fi
                ;;
            3)
                show_available_commands
                pause
                ;;
            4)
                show_quick_start
                pause
                ;;
            0) return ;;
            *) echo -e "${RED}Invalid option${NC}"; sleep 1 ;;
        esac
    done
}

# Helper function to show available commands
show_available_commands() {
    echo -e "${BOLD}Available CLI Commands:${NC}"
    echo ""
    echo -e "${CYAN}Repository Management:${NC}"
    echo "  ./scripts/workspace                → Interactive menu (current)"
    echo "  ./repository_sync                  → Repository sync interactive menu"
    echo "  ./repository_sync <command> <scope> → Direct command execution"
    echo ""
    echo -e "${CYAN}Compliance & Standards:${NC}"
    echo "  ./scripts/compliance/propagate_claude_config.py → Propagate Claude config"
    echo "  ./scripts/compliance/propagate_guidelines.sh    → Propagate AI guidelines"
    echo "  ./scripts/compliance/verify_compliance.sh       → Verify compliance"
    echo ""
    echo -e "${CYAN}Development Tools:${NC}"
    echo "  ./scripts/development/refactor-analysis.sh      → Code refactoring analysis"
    echo "  ./scripts/development/install_factory_ai.sh     → Install Factory.ai"
    echo "  ./scripts/development/droid                     → Factory.ai droid CLI"
    echo ""
    echo -e "${CYAN}System Management:${NC}"
    echo "  ./scripts/system/sync                           → Workspace synchronization"
    echo "  ./scripts/repository/configure_repos.sh         → Configure repository URLs"
    echo ""
}

# Helper function to show quick start guide
show_quick_start() {
    echo -e "${BOLD}Quick Start Guide${NC}"
    echo ""
    echo -e "${CYAN}1. Configure Repository URLs:${NC}"
    echo "   Run: ./scripts/repository/configure_repos.sh"
    echo "   Or:  Navigate to Repository Management → Configure Repository URLs"
    echo ""
    echo -e "${CYAN}2. Clone Repositories:${NC}"
    echo "   Run: ./repository_sync clone all"
    echo "   Or:  Navigate to Repository Management → Repository Sync Manager"
    echo ""
    echo -e "${CYAN}3. Setup Compliance (Optional):${NC}"
    echo "   Run: ./scripts/compliance/setup_compliance.sh"
    echo "   Or:  Navigate to Compliance & Standards → Compliance Enforcement"
    echo ""
    echo -e "${CYAN}4. Start Working:${NC}"
    echo "   Use repository_sync for git operations:"
    echo "   - ./repository_sync status all       → Check status"
    echo "   - ./repository_sync pull all         → Pull updates"
    echo "   - ./repository_sync commit all       → Commit changes"
    echo "   - ./repository_sync push all         → Push changes"
    echo ""
    echo -e "${CYAN}5. For Help:${NC}"
    echo "   ./repository_sync help               → Repository sync help"
    echo "   ./scripts/workspace                  → This interactive menu"
    echo ""
}

#==============================================================================
# Main Entry Point
#==============================================================================

# Check if running from correct directory
if [[ ! -d "$SCRIPTS_DIR" ]]; then
    echo -e "${RED}Error: Scripts directory not found${NC}"
    echo "Expected: $SCRIPTS_DIR"
    echo ""
    echo "Please run this script from the workspace root directory."
    exit 1
fi

# Make script executable
chmod +x "$WORKSPACE_ROOT/repository_sync" 2>/dev/null || true
chmod +x "$SCRIPTS_DIR"/*.sh 2>/dev/null || true
chmod +x "$SCRIPTS_DIR"/*/*.sh 2>/dev/null || true

# Run main menu
show_main_menu
