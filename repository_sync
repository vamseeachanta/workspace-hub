#!/bin/bash

# ABOUTME: Repository synchronization script with CLI menu for cloning and syncing work/personal repos
# ABOUTME: Handles cloning, staging, committing, and syncing repositories to remote

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
WORKSPACE_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
GITIGNORE_FILE="$WORKSPACE_ROOT/.gitignore"
REPO_CONFIG_FILE="$WORKSPACE_ROOT/config/repos.conf"

# Arrays to store repo information
declare -A REPO_CATEGORIES
declare -A REPO_URLS
declare -a ALL_REPOS
declare -a WORK_REPOS
declare -a PERSONAL_REPOS

# Function to parse .gitignore and extract repo information
parse_gitignore() {
    echo -e "${BLUE}Parsing .gitignore for repository list...${NC}"

    while IFS= read -r line; do
        # Skip empty lines and comments that don't have repo info
        if [[ -z "$line" ]] || [[ "$line" =~ ^#[^P][^e] ]]; then
            continue
        fi

        # Match lines with repo directories (ending with /) and optional category comments
        if [[ "$line" =~ ^([a-zA-Z0-9_-]+)/[[:space:]]*(#[[:space:]]*(Personal|Work|Personal,[[:space:]]*Work|Work,[[:space:]]*Personal))?$ ]]; then
            repo_name="${BASH_REMATCH[1]}"
            category="${BASH_REMATCH[3]}"

            # Skip coordination and other non-repo directories
            if [[ "$repo_name" == "coordination" ]]; then
                continue
            fi

            ALL_REPOS+=("$repo_name")

            # Categorize repos
            if [[ -z "$category" ]]; then
                REPO_CATEGORIES["$repo_name"]="Uncategorized"
            elif [[ "$category" =~ Personal.*Work|Work.*Personal ]]; then
                REPO_CATEGORIES["$repo_name"]="Both"
                WORK_REPOS+=("$repo_name")
                PERSONAL_REPOS+=("$repo_name")
            elif [[ "$category" == "Work" ]]; then
                REPO_CATEGORIES["$repo_name"]="Work"
                WORK_REPOS+=("$repo_name")
            elif [[ "$category" == "Personal" ]]; then
                REPO_CATEGORIES["$repo_name"]="Personal"
                PERSONAL_REPOS+=("$repo_name")
            fi
        fi
    done < "$GITIGNORE_FILE"

    echo -e "${GREEN}✓ Found ${#ALL_REPOS[@]} repositories${NC}"
    echo -e "  ${CYAN}Work repos: ${#WORK_REPOS[@]}${NC}"
    echo -e "  ${CYAN}Personal repos: ${#PERSONAL_REPOS[@]}${NC}"
}

# Function to load repo URLs from config file
load_repo_config() {
    if [ ! -f "$REPO_CONFIG_FILE" ]; then
        echo -e "${YELLOW}⚠ Repository configuration file not found: $REPO_CONFIG_FILE${NC}"
        echo -e "${YELLOW}Creating template configuration file...${NC}"
        create_config_template
        echo -e "${YELLOW}Please edit $REPO_CONFIG_FILE with your repository URLs${NC}"
        return 1
    fi

    echo -e "${BLUE}Loading repository URLs from config...${NC}"

    while IFS='=' read -r repo_name repo_url; do
        # Skip comments and empty lines
        if [[ "$repo_name" =~ ^#.*$ ]] || [[ -z "$repo_name" ]]; then
            continue
        fi

        # Trim whitespace
        repo_name=$(echo "$repo_name" | xargs)
        repo_url=$(echo "$repo_url" | xargs)

        REPO_URLS["$repo_name"]="$repo_url"
    done < "$REPO_CONFIG_FILE"

    echo -e "${GREEN}✓ Loaded ${#REPO_URLS[@]} repository URLs${NC}"
}

# Function to create config template
create_config_template() {
    mkdir -p "$(dirname "$REPO_CONFIG_FILE")"

    cat > "$REPO_CONFIG_FILE" << 'EOF'
# Repository URL Configuration
# Format: repo_name=git_url
#
# Example:
# digitalmodel=git@github.com:username/digitalmodel.git
# aceengineer-admin=git@github.com:username/aceengineer-admin.git
#
# Add your repository URLs below:

EOF

    # Add entries for all repos found in .gitignore
    for repo in "${ALL_REPOS[@]}"; do
        category="${REPO_CATEGORIES[$repo]}"
        echo "# $repo ($category)" >> "$REPO_CONFIG_FILE"
        echo "$repo=" >> "$REPO_CONFIG_FILE"
        echo "" >> "$REPO_CONFIG_FILE"
    done

    echo -e "${GREEN}✓ Created template: $REPO_CONFIG_FILE${NC}"
}

# Function to check if repo exists
repo_exists() {
    local repo_name="$1"
    local repo_path="$WORKSPACE_ROOT/$repo_name"

    if [ -d "$repo_path/.git" ]; then
        return 0  # Exists
    else
        return 1  # Does not exist
    fi
}

# Function to check git status of a repository
check_git_status() {
    local repo_name="$1"
    local repo_path="$WORKSPACE_ROOT/$repo_name"

    if ! repo_exists "$repo_name"; then
        echo "not_cloned"
        return
    fi

    cd "$repo_path"

    # Check for uncommitted changes
    if [ -n "$(git status --porcelain)" ]; then
        echo "dirty"
    # Check for unpushed commits
    elif [ -n "$(git log @{u}.. 2>/dev/null)" ]; then
        echo "unpushed"
    # Check if behind remote
    elif [ -n "$(git log ..@{u} 2>/dev/null)" ]; then
        echo "behind"
    else
        echo "clean"
    fi

    cd "$WORKSPACE_ROOT"
}

# Function to clone a repository
clone_repo() {
    local repo_name="$1"
    local repo_url="${REPO_URLS[$repo_name]}"
    local repo_path="$WORKSPACE_ROOT/$repo_name"

    if [ -z "$repo_url" ]; then
        echo -e "${RED}✗ No URL configured for $repo_name${NC}"
        return 1
    fi

    if repo_exists "$repo_name"; then
        echo -e "${YELLOW}⊘ $repo_name already exists, skipping${NC}"
        return 0
    fi

    echo -e "${BLUE}→ Cloning $repo_name...${NC}"

    if git clone "$repo_url" "$repo_path"; then
        echo -e "${GREEN}✓ Successfully cloned $repo_name${NC}"
        return 0
    else
        echo -e "${RED}✗ Failed to clone $repo_name${NC}"
        return 1
    fi
}

# Function to stage and commit changes in a repository
commit_repo() {
    local repo_name="$1"
    local repo_path="$WORKSPACE_ROOT/$repo_name"
    local commit_message="$2"

    if ! repo_exists "$repo_name"; then
        echo -e "${YELLOW}⊘ $repo_name not cloned, skipping${NC}"
        return 0
    fi

    cd "$repo_path"

    # Check if there are changes
    if [ -z "$(git status --porcelain)" ]; then
        echo -e "${YELLOW}⊘ $repo_name: No changes to commit${NC}"
        cd "$WORKSPACE_ROOT"
        return 0
    fi

    echo -e "${BLUE}→ Committing changes in $repo_name...${NC}"

    # Stage all changes
    git add .

    # Commit with message
    if [ -z "$commit_message" ]; then
        commit_message="Update: Batch commit from repository_sync

🤖 Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    fi

    if git commit -m "$commit_message"; then
        echo -e "${GREEN}✓ Committed changes in $repo_name${NC}"
        cd "$WORKSPACE_ROOT"
        return 0
    else
        echo -e "${RED}✗ Failed to commit in $repo_name${NC}"
        cd "$WORKSPACE_ROOT"
        return 1
    fi
}

# Function to push repository to remote
push_repo() {
    local repo_name="$1"
    local repo_path="$WORKSPACE_ROOT/$repo_name"

    if ! repo_exists "$repo_name"; then
        echo -e "${YELLOW}⊘ $repo_name not cloned, skipping${NC}"
        return 0
    fi

    cd "$repo_path"

    # Check if there's anything to push
    if [ -z "$(git log @{u}.. 2>/dev/null)" ]; then
        echo -e "${YELLOW}⊘ $repo_name: Nothing to push${NC}"
        cd "$WORKSPACE_ROOT"
        return 0
    fi

    echo -e "${BLUE}→ Pushing $repo_name to remote...${NC}"

    if git push; then
        echo -e "${GREEN}✓ Successfully pushed $repo_name${NC}"
        cd "$WORKSPACE_ROOT"
        return 0
    else
        echo -e "${RED}✗ Failed to push $repo_name${NC}"
        cd "$WORKSPACE_ROOT"
        return 1
    fi
}

# Function to pull from remote
pull_repo() {
    local repo_name="$1"
    local repo_path="$WORKSPACE_ROOT/$repo_name"

    if ! repo_exists "$repo_name"; then
        echo -e "${YELLOW}⊘ $repo_name not cloned, skipping${NC}"
        return 0
    fi

    cd "$repo_path"

    echo -e "${BLUE}→ Pulling updates for $repo_name...${NC}"

    if git pull; then
        echo -e "${GREEN}✓ Successfully pulled $repo_name${NC}"
        cd "$WORKSPACE_ROOT"
        return 0
    else
        echo -e "${RED}✗ Failed to pull $repo_name${NC}"
        cd "$WORKSPACE_ROOT"
        return 1
    fi
}

# Function to sync repository (commit + push)
sync_repo() {
    local repo_name="$1"
    local commit_message="$2"

    echo -e "${CYAN}Syncing $repo_name...${NC}"

    # Commit if there are changes
    commit_repo "$repo_name" "$commit_message"

    # Push to remote
    push_repo "$repo_name"
}

# Function to process multiple repositories
process_repos() {
    local -n repos=$1
    local operation="$2"
    local category="$3"
    local commit_message="$4"

    echo ""
    echo -e "${CYAN}======================================${NC}"
    echo -e "${CYAN}$operation $category Repositories${NC}"
    echo -e "${CYAN}======================================${NC}"
    echo ""

    local success_count=0
    local skip_count=0
    local fail_count=0
    local total=${#repos[@]}

    for repo in "${repos[@]}"; do
        case "$operation" in
            "Committing")
                if commit_repo "$repo" "$commit_message"; then
                    ((success_count++)) || true
                else
                    ((fail_count++)) || true
                fi
                ;;
            "Pushing")
                if push_repo "$repo"; then
                    ((success_count++)) || true
                else
                    ((fail_count++)) || true
                fi
                ;;
            "Pulling")
                if pull_repo "$repo"; then
                    ((success_count++)) || true
                else
                    ((fail_count++)) || true
                fi
                ;;
            "Syncing")
                sync_repo "$repo" "$commit_message"
                ((success_count++)) || true
                ;;
        esac
    done

    echo ""
    echo -e "${CYAN}======================================${NC}"
    echo -e "${CYAN}Summary${NC}"
    echo -e "${CYAN}======================================${NC}"
    echo -e "Total repositories: ${total}"
    echo -e "${GREEN}Successful operations: ${success_count}${NC}"
    echo -e "${RED}Failed operations: ${fail_count}${NC}"
    echo ""
}

# Function to clone multiple repos
clone_repos() {
    local -n repos=$1
    local category="$2"

    echo ""
    echo -e "${CYAN}======================================${NC}"
    echo -e "${CYAN}Cloning $category Repositories${NC}"
    echo -e "${CYAN}======================================${NC}"
    echo ""

    local success_count=0
    local skip_count=0
    local fail_count=0
    local total=${#repos[@]}

    for repo in "${repos[@]}"; do
        if clone_repo "$repo"; then
            if repo_exists "$repo"; then
                ((skip_count++)) || true
            else
                ((success_count++)) || true
            fi
        else
            ((fail_count++)) || true
        fi
    done

    echo ""
    echo -e "${CYAN}======================================${NC}"
    echo -e "${CYAN}Summary${NC}"
    echo -e "${CYAN}======================================${NC}"
    echo -e "Total repositories: ${total}"
    echo -e "${GREEN}Successfully cloned: ${success_count}${NC}"
    echo -e "${YELLOW}Already existed: ${skip_count}${NC}"
    echo -e "${RED}Failed: ${fail_count}${NC}"
    echo ""
}

# Function to list repositories with detailed status
list_repos() {
    local filter="$1"
    local -a repos_to_list

    case "$filter" in
        "work")
            repos_to_list=("${WORK_REPOS[@]}")
            echo -e "${CYAN}Work Repositories:${NC}"
            ;;
        "personal")
            repos_to_list=("${PERSONAL_REPOS[@]}")
            echo -e "${CYAN}Personal Repositories:${NC}"
            ;;
        *)
            repos_to_list=("${ALL_REPOS[@]}")
            echo -e "${CYAN}All Repositories:${NC}"
            ;;
    esac

    echo ""
    printf "%-30s %-15s %-15s %s\n" "Repository" "Category" "Git Status" "URL"
    echo "--------------------------------------------------------------------------------"

    for repo in "${repos_to_list[@]}"; do
        local category="${REPO_CATEGORIES[$repo]}"
        local url="${REPO_URLS[$repo]:-"Not configured"}"
        local git_status=$(check_git_status "$repo")
        local status_display

        case "$git_status" in
            "not_cloned")
                status_display="${YELLOW}Not cloned${NC}"
                ;;
            "clean")
                status_display="${GREEN}Clean${NC}"
                ;;
            "dirty")
                status_display="${RED}Uncommitted${NC}"
                ;;
            "unpushed")
                status_display="${MAGENTA}Unpushed${NC}"
                ;;
            "behind")
                status_display="${CYAN}Behind remote${NC}"
                ;;
        esac

        printf "%-30s %-15s %-30b %-40s\n" "$repo" "$category" "$status_display" "$url"
    done

    echo ""
}

# Function to get commit message from user
get_commit_message() {
    echo ""
    echo -e "${CYAN}Enter commit message (or press Enter for default):${NC}"
    read -r custom_message

    if [ -z "$custom_message" ]; then
        echo "Update: Batch commit from repository_sync

🤖 Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    else
        echo "$custom_message

🤖 Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    fi
}

# Function to display main menu
show_menu() {
    clear
    echo -e "${BLUE}╔════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║                  Repository Sync Manager                      ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}Repository Statistics:${NC}"
    echo -e "  Total repositories: ${#ALL_REPOS[@]}"
    echo -e "  Work repositories: ${#WORK_REPOS[@]}"
    echo -e "  Personal repositories: ${#PERSONAL_REPOS[@]}"
    echo ""
    echo -e "${CYAN}═══ Repository Management ═══${NC}"
    echo ""
    echo "  1) List all repositories"
    echo "  2) List work repositories"
    echo "  3) List personal repositories"
    echo ""
    echo -e "${CYAN}═══ Clone Operations ═══${NC}"
    echo ""
    echo "  4) Clone all repositories"
    echo "  5) Clone work repositories"
    echo "  6) Clone personal repositories"
    echo "  7) Clone specific repository"
    echo ""
    echo -e "${CYAN}═══ Git Operations ═══${NC}"
    echo ""
    echo "  10) Commit all repositories"
    echo "  11) Commit work repositories"
    echo "  12) Commit personal repositories"
    echo ""
    echo "  13) Push all repositories"
    echo "  14) Push work repositories"
    echo "  15) Push personal repositories"
    echo ""
    echo "  16) Pull all repositories"
    echo "  17) Pull work repositories"
    echo "  18) Pull personal repositories"
    echo ""
    echo "  19) Full sync all (commit + push)"
    echo "  20) Full sync work (commit + push)"
    echo "  21) Full sync personal (commit + push)"
    echo ""
    echo -e "${CYAN}═══ Configuration ═══${NC}"
    echo ""
    echo "  8) Edit repository configuration"
    echo "  9) Refresh repository list"
    echo ""
    echo "  0) Exit"
    echo ""
    echo -n "Enter your choice: "
}

# Function to clone specific repository
clone_specific_repo() {
    echo ""
    echo -e "${CYAN}Available repositories:${NC}"
    echo ""

    local i=1
    for repo in "${ALL_REPOS[@]}"; do
        local status
        if repo_exists "$repo"; then
            status="${GREEN}[Cloned]${NC}"
        else
            status="${YELLOW}[Not cloned]${NC}"
        fi
        printf "%2d) %-30s %b\n" "$i" "$repo" "$status"
        ((i++))
    done

    echo ""
    echo -n "Enter repository number (or 0 to cancel): "
    read -r choice

    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -gt 0 ] && [ "$choice" -le "${#ALL_REPOS[@]}" ]; then
        local repo="${ALL_REPOS[$((choice-1))]}"
        echo ""
        clone_repo "$repo"
        echo ""
        echo -n "Press Enter to continue..."
        read -r
    elif [ "$choice" != "0" ]; then
        echo -e "${RED}Invalid choice${NC}"
        echo -n "Press Enter to continue..."
        read -r
    fi
}

# Main execution
main() {
    cd "$WORKSPACE_ROOT"

    # Parse .gitignore
    parse_gitignore

    # Load repo URLs
    if ! load_repo_config; then
        echo -e "${YELLOW}Please configure repository URLs and run this script again.${NC}"
        exit 1
    fi

    # Main menu loop
    while true; do
        show_menu
        read -r choice

        case "$choice" in
            1)
                clear
                list_repos "all"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            2)
                clear
                list_repos "work"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            3)
                clear
                list_repos "personal"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            4)
                clone_repos ALL_REPOS "All"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            5)
                clone_repos WORK_REPOS "Work"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            6)
                clone_repos PERSONAL_REPOS "Personal"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            7)
                clone_specific_repo
                ;;
            8)
                ${EDITOR:-nano} "$REPO_CONFIG_FILE"
                load_repo_config
                ;;
            9)
                parse_gitignore
                load_repo_config
                echo -e "${GREEN}✓ Repository list refreshed${NC}"
                sleep 1
                ;;
            10)
                commit_msg=$(get_commit_message)
                process_repos ALL_REPOS "Committing" "All" "$commit_msg"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            11)
                commit_msg=$(get_commit_message)
                process_repos WORK_REPOS "Committing" "Work" "$commit_msg"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            12)
                commit_msg=$(get_commit_message)
                process_repos PERSONAL_REPOS "Committing" "Personal" "$commit_msg"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            13)
                process_repos ALL_REPOS "Pushing" "All"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            14)
                process_repos WORK_REPOS "Pushing" "Work"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            15)
                process_repos PERSONAL_REPOS "Pushing" "Personal"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            16)
                process_repos ALL_REPOS "Pulling" "All"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            17)
                process_repos WORK_REPOS "Pulling" "Work"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            18)
                process_repos PERSONAL_REPOS "Pulling" "Personal"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            19)
                commit_msg=$(get_commit_message)
                process_repos ALL_REPOS "Syncing" "All" "$commit_msg"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            20)
                commit_msg=$(get_commit_message)
                process_repos WORK_REPOS "Syncing" "Work" "$commit_msg"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            21)
                commit_msg=$(get_commit_message)
                process_repos PERSONAL_REPOS "Syncing" "Personal" "$commit_msg"
                echo -n "Press Enter to continue..."
                read -r
                ;;
            0)
                echo ""
                echo -e "${GREEN}Goodbye!${NC}"
                echo ""
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid choice. Please try again.${NC}"
                sleep 1
                ;;
        esac
    done
}

# Run main function
main
